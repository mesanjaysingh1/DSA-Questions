Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.

If target is not found in the array, return [-1, -1].

You must write an algorithm with O(log n) runtime complexity. 

Example 1:

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]

Idea: Do 2 times binary search one for finding leftmost & other for rightmost. Binary search would be like find element then check if present in left by r=mid-1 & check
if present in right by l=mid+1;

TC:O(logn) SC:O(1)

class Solution {
    public int[] searchRange(int[] nums, int target) {
        int pos1=BinarySearch(nums,target,true); int pos2=BinarySearch(nums,target,false);
        return new int [] {pos1,pos2};
    }
    public int BinarySearch(int [] nums,int target, boolean leftBias){
        int l=0, r = nums.length-1, res=-1;
        while(l<=r){
                int mid = (l+r)/2;
                if(nums[mid]==target){
                    res=mid; if(leftBias){r=mid-1;} else{l=mid+1;}
                }
                else if(nums[mid]>target){r=mid-1;}
                else {l=mid+1;}
        }
        return res;
    }
}
