You are given an array prices where prices[i] is the price of a given stock on the ith day.

You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.

Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.

Example 1:

Input: prices = [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.


Idea: 2 pointers left=0, right=1. if val of right<left left=right & inc right else cal diff and move right++.

class Solution {
    public int maxProfit(int[] prices) {
     int left=0,n=prices.length,right=1,res=Integer.MIN_VALUE;
     while(left<n && right<n){
         if(prices[right]<prices[left]){
             left=right;right++;
         }
         else{
             int profit = prices[right]-prices[left];
             res=Math.max(res,profit);
             right++;
         }
     }
        return res>0?res:0;
    }
}

Soln 2:
class Solution {
    public int maxProfit(int[] prices) {
     int res=Integer.MIN_VALUE,min=Integer.MAX_VALUE;
      for(int price:prices){
          min = Math.min(min,price);
          res = Math.max(res,price-min);
      }  
        return res>0?res:0;
    }
}
