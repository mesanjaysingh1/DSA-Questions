You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.
Example 1:
Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [7,0,8]
Explanation: 342 + 465 = 807.

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
       ListNode curr1=l1,curr2=l2;ListNode root= new ListNode();
        ListNode curr=root;
        int carry=0;
        while(curr1!=null ||curr2!=null){
            int sum = (curr1!=null ? curr1.val:0)+(curr2!=null?curr2.val:0)+carry;
            int res = sum%10; 
            curr.next = new ListNode(res);curr=curr.next;
            if(curr1!=null)curr1=curr1.next;
            if(curr2!=null)curr2=curr2.next;
            carry = sum/10;
        }
        
        if(carry==1){curr.next = new ListNode(carry);}
        return root.next;
    }
}
