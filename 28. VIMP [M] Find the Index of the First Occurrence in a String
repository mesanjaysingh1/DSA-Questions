Given two strings needle and haystack, return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack. 

Example 1:

Input: haystack = "sadbutsad", needle = "sad"
Output: 0
Explanation: "sad" occurs at index 0 and 6.
The first occurrence is at index 0, so we return 0.

Brute:
Idea: Using sliding window check if string matches with needle string. 

TC: O(n * m) SC:O(1) n=len of needle m= len of haystack 

class Solution {
    public int strStr(String haystack, String needle) {
        if(needle.length()>haystack.length()) return -1;
        String check="";
        for(int i=0;i<needle.length();i++){
            check+=haystack.charAt(i);
        }
        int l=0;
        if(check.equals(needle)){return l;}
        for(int r=needle.length();r<haystack.length();r++){
            check = haystack.substring(l+1,r+1);
            l++;
            if(check.equals(needle)){return l;}
            
        }
        return -1;
    }
}

Optimal: Using KMP Algo 
Idea: Create LPS (longest prefix suffix) to elemenate repeated work of comparing strings from start when there is a mismatch. 
Instead with LPS we can get how many char before mismatch index are already matching so that we can eleminate repeated work.

TC:O(n + m) SC:O(n)  n=len of needle m= len of haystack 

class Solution {
    public int strStr(String haystack, String needle) {

        int [] lps = new int[needle.length()];
        int i=1,prevLPS = 0;
        while(i<needle.length()){
            if(needle.charAt(i) == needle.charAt(prevLPS)){
                lps[i]=prevLPS+1;
                prevLPS+=1; i+=1;
            }
            else{
                if(prevLPS==0){
                lps[i]=0; i+=1;
                }
                else{
                prevLPS=lps[prevLPS-1];
                }
            }
        }
        i=0;//i-> ptr for haystack
        int j=0; // j-> ptr for needle
        while(i<haystack.length()){
            if(haystack.charAt(i) == needle.charAt(j)){
                i++;j++;
            }
            else{
                if(j==0){i++;}
                else{
                j=lps[j-1]; // geting from lps matching char count to elemenate repeated work
                }
            } 
            if(j==needle.length()){return i-j;} 
            // removing needle length from haystack ptr to get 1st index of match
                
        }
        return -1;
    }
}

