You are given an m x n grid where each cell can have one of three values:

0 representing an empty cell,
1 representing a fresh orange, or
2 representing a rotten orange.
Every minute, any fresh orange that is 4-directionally adjacent to a rotten orange becomes rotten.

Return the minimum number of minutes that must elapse until no cell has a fresh orange. If this is impossible, return -1.

Example 1:

Input: grid = [[2,1,1],[1,1,0],[0,1,1]]
Output: 4

Idea: for rotten orange do dfs recursively and start time=2 & add time+1 for neighbor fresh cell. Later check if any cell ==1 i.e rem then return -1 else get max time
out of all cells

class Solution {
    public int orangesRotting(int[][] grid) {
        if(grid==null) return -1;
        int row=grid.length,col=grid[0].length;
        for(int i=0;i<row;i++){
            for(int j=0;j<col;j++){
                if(grid[i][j]==2){
                    dfs(grid,i,j,2);
                }
            }
        }
        int min=2;
         for(int[] rows : grid) {
            for(int cell : rows) {
                if(cell == 1) return -1;
                min = Math.max(min, cell);
            }
        }
        return min-2;
    }
    public void dfs(int[][]grid,int i,int j,int min){
        if(i<0||j<0||i>=grid.length||j>=grid[0].length||grid[i][j]==0||
           (1<grid[i][j] && grid[i][j]<min))return;
        
        grid[i][j]=min;
        dfs(grid,i+1,j,min+1);dfs(grid,i-1,j,min+1);
        dfs(grid,i,j+1,min+1);dfs(grid,i,j-1,min+1);
    }
}
