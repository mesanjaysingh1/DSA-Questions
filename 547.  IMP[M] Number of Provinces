There are n cities. Some of them are connected, while some are not. If city a is connected directly with city b, and city b is connected directly with city c, 
then city a is connected indirectly with city c.

A province is a group of directly or indirectly connected cities and no other cities outside of the group.

You are given an n x n matrix isConnected where isConnected[i][j] = 1 if the ith city and the jth city are directly connected, and isConnected[i][j] = 0 otherwise.

Return the total number of provinces.

Example 1:


Input: isConnected = [[1,1,0],[1,1,0],[0,0,1]]
Output: 2

Idea: Do dfs and mark all connected component as visited & inc count only once. 

TC:O(n*n) SC:O(n)
class Solution {
    public int findCircleNum(int[][] isConnected) {
        HashSet<Integer> visited = new HashSet<>();
        int count=0;
        for(int i=0;i<isConnected.length;i++){
            if(visited.contains(i+1)){continue;}
            dfs(isConnected,visited,i);
            count++;
        }
        
        return count;
    }
    public void dfs(int[][] isConnected, HashSet<Integer> visited,int i){
        if(visited.contains(i+1)) return; //already visited node
        visited.add(i+1);
        for(int j=0;j<isConnected[i].length;j++){
            if(isConnected[i][j]==1 && i!=j){
                dfs(isConnected,visited,j);
            }
        }
    }
}
