Given an integer array nums, find a contiguous non-empty subarray within the array that has the largest product, and return the product.

The test cases are generated so that the answer will fit in a 32-bit integer.

A subarray is a contiguous subsequence of the array.

Example 1:

Input: nums = [2,3,-2,4]
Output: 6
Explanation: [2,3] has the largest product 6.

Idea: Compute max,min product for each number in sequence. If num itself is max/min then make that as max/min else compute prod prevmax/min with curr num

class Solution {
    public int maxProduct(int[] nums) {
        if(nums.length==1) return nums[0];
        int max=1,min=1,res=0;
        for(int n:nums){
            if(n==0){max=1;min=1;continue;}
            int temp=max;
            max = Math.max(max*n,Math.max(min*n,n));
            min = Math.min(min*n,Math.min(temp*n,n));
            res=Math.max(res,max);
        }
        return res;
    }
}
