Description: https://leetcode.com/problems/implement-trie-prefix-tree/

Idea: Create array of children for each node where will store address of next node.

This is implementation of Trie DS

class Trie {
    TrieNode root;
    public Trie() {
        root= new TrieNode('\0');
    }
    
    public void insert(String word) {
        TrieNode curr = root;
        for(char c: word.toCharArray()){
            if(curr.children[c-'a']==null){
              curr.children[c-'a']= new TrieNode(c);  
            }
            curr=curr.children[c-'a'];
        }
        curr.isWord=true;
    }
    
    public boolean search(String word) {
        TrieNode res = getLast(word);
        return (res!=null && res.isWord);
    }
    
    public boolean startsWith(String prefix) {
        TrieNode res = getLast(prefix);
        return (res!=null);
    }
    public TrieNode getLast(String word){
        TrieNode curr = root;
        for(char c: word.toCharArray()){
            if(curr.children[c-'a']==null){return null;}
            curr = curr.children[c-'a'];
        }
        return curr;
    }
    
    class TrieNode {
    char val; TrieNode children[] = new TrieNode[26]; boolean isWord;
        public TrieNode(char val){
            this.val=val;
        }
    }
}

/**
 * Your Trie object will be instantiated and called as such:
 * Trie obj = new Trie();
 * obj.insert(word);
 * boolean param_2 = obj.search(word);
 * boolean param_3 = obj.startsWith(prefix);
 */
