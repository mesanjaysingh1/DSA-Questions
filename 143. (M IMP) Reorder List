ou are given the head of a singly linked-list. The list can be represented as:

L0 → L1 → … → Ln - 1 → Ln
Reorder the list to be on the following form:

L0 → Ln → L1 → Ln - 1 → L2 → Ln - 2 → …
You may not modify the values in the list's nodes. Only nodes themselves may be changed.

Example 1:

Input: head = [1,2,3,4]
Output: [1,4,2,3]

Idea: break linked list into 2 parts using slow fast pointers. reverse links of 2nd half then add it to next of every element in first half.

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public void reorderList(ListNode head) {
      ListNode left =head,slow=head,fast=head.next;
      while(fast!=null && fast.next!=null){
          slow=slow.next;fast=fast.next.next;
      } 
       ListNode prev=null,temp=slow.next;slow.next=null;slow=temp;
        while(slow!=null){
            temp=slow.next;slow.next=prev;prev=slow;slow=temp;
        }
        ListNode right=prev,temp1=null,temp2=null;
        while(right!=null){
            temp1=left.next;temp2 = right.next;
            left.next=right;left.next.next=temp1;
            left=temp1;right=temp2;
        }
    }
}
