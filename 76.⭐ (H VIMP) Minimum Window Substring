Given two strings s and t of lengths m and n respectively, return the minimum window substring of s such that every character in t
(including duplicates) is included in the window. If there is no such substring, return the empty string "".
The testcases will be generated such that the answer is unique.

A substring is a contiguous sequence of characters within the string.

Example 1:

Input: s = "ADOBECODEBANC", t = "ABC"
Output: "BANC"
Explanation: The minimum window substring "BANC" includes 'A', 'B', and 'C' from string t.

Idea:[Sliding Window] For String in t create map. if char in s matches & makes freq of t's char 0 then match++ else keep inc window size. 
if match==map.size (i.e we have all elements req in t) then cal res length if <prev res & del left char from window if its in t & keep on inc left 
while match=window size.

TC: O(n) SC:O(n)
class Solution {
    public String minWindow(String s, String t) {
       HashMap<Character,Integer> map = new HashMap<>(); // char:freq (of t)
       for(char c:t.toCharArray()){map.put(c,map.getOrDefault(c,0)+1);}
        int left=0, substr_pos=0;
        int matched=0,minLength=s.length()+1;
        for(int right=0;right<s.length();right++){
            char r = s.charAt(right);
            if(map.containsKey(r)){
                map.put(r,map.get(r)-1);
                if(map.get(r)==0){matched++;}
            }
            while(matched==map.size()){
            if(minLength>(right-left+1)) { //cal res length
                   minLength=right-left+1;
                   substr_pos = left;
               }
                char del = s.charAt(left);
               if(map.containsKey(del)){
                if(map.get(del)==0){matched--;}
                map.put(del,map.get(del)+1);
                }
                left++;
            }
        }
        return minLength>s.length()?"":s.substring(substr_pos,substr_pos+minLength);
    }
}
