Given string num representing a non-negative integer num, and an integer k, return the smallest possible integer after removing k digits from num. 

Example 1:

Input: num = "1432219", k = 3
Output: "1219"
Explanation: Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest.

Idea: Create increasing stack [i.e monotonic stack] if curr num < peek pop peek and add curr num to stack. After all if k>0 then remove till k==0. Remove leading 0's
too.

TC:O(n) SC:O(n)

class Solution {
    public String removeKdigits(String num, int k) {
        ArrayDeque<Character> stk = new ArrayDeque<>();
        for(int i=0;i<num.length();i++){
            char val = num.charAt(i);
            while(!stk.isEmpty() && (stk.peek()-'0') > (val-'0') && k>0){
                stk.pop();k--;
            }
            stk.push(val);
        }
        String res="";
        while(!stk.isEmpty() && k>0){stk.pop();k--;} //k still >0 so remove big nums
        while(!stk.isEmpty()){res=stk.pop()+res;}
        while(res.length()>1 && res.charAt(0)=='0')
            {res=res.substring(1,res.length());}   //remove leading 0s

       return res.equals("")?"0":res; 
    }
}
