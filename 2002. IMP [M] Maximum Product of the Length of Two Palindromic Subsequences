Given a string s, find two disjoint palindromic subsequences of s such that the product of their lengths is maximized. The two subsequences are disjoint if
they do not both pick a character at the same index.

Return the maximum possible product of the lengths of the two palindromic subsequences.

A subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.
A string is palindromic if it reads the same forward and backward. 

Example 1:

example-1
Input: s = "leetcodecom"
Output: 9
Explanation: An optimal solution is to choose "ete" for the 1st subsequence and "cdc" for the 2nd subsequence.
The product of their lengths is: 3 * 3 = 9.

Idea: Create all substrings possible with bitmasking. Add to map if palindrome key->mask val and val->length of str. Using map find two vals whose key are not same 
and val multiplication is max.

TC:O(4 ^^n) SC:O(2^^n)
class Solution {
    public int maxProduct(String s) {
        int n =s.length();
        HashMap<Integer,Integer> map = new HashMap<>(); //mask val->len of palin substr
        int maskl = 1<<n; //1<<n == 2 to pow n
        for(int mask=1;mask<maskl;mask++){
            String substr="";
            for(int i=0;i<n;i++){
                if((mask & (1<<i))!=0){
                    substr+=s.charAt(n-i-1);
                }
            }
           if(palind(substr)){
               map.put(mask,substr.length());
           } 
        }
        int res=0;
        for(int m1:map.keySet()){
            for(int m2:map.keySet()){
                if((m1&m2)==0){
                    res=Math.max(res,map.get(m1)*map.get(m2));
                }
            }
        }
        return res;
    }
    public boolean palind(String s){
        int left=0,right=s.length()-1;
        while(left<right){
            if(s.charAt(left)!=s.charAt(right)){return false;} left++;right--;
        }
        return true;
    }
}
