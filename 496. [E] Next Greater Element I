The next greater element of some element x in an array is the first greater element that is to the right of x in the same array.

You are given two distinct 0-indexed integer arrays nums1 and nums2, where nums1 is a subset of nums2.

For each 0 <= i < nums1.length, find the index j such that nums1[i] == nums2[j] and determine the next greater element of nums2[j] in nums2. 
If there is no next greater element, then the answer for this query is -1.

Return an array ans of length nums1.length such that ans[i] is the next greater element as described above.

Example 1:

Input: nums1 = [4,1,2], nums2 = [1,3,4,2]
Output: [-1,3,-1]
Explanation: The next greater element for each value of nums1 is as follows:
- 4 is underlined in nums2 = [1,3,4,2]. There is no next greater element, so the answer is -1.
- 1 is underlined in nums2 = [1,3,4,2]. The next greater element is 3.
- 2 is underlined in nums2 = [1,3,4,2]. There is no next greater element, so the answer is -1.

Brute: 

Idea: Map nums2 no. with its index. Use this while iterating nums1 and try to find > element by using index of same num from map.

TC:O(n^2) SC:O(n)
class Solution {
    public int[] nextGreaterElement(int[] nums1, int[] nums2) {
        int res[] = new int[nums1.length];
        HashMap<Integer,Integer> map_num2 = new HashMap<>(); // integer,index in num2
        for(int i=0;i<nums2.length;i++){map_num2.put(nums2[i],i);}
        for(int i=0;i<nums1.length;i++){
            int greater =-1;int index = map_num2.get(nums1[i]);
            for(int j=index+1;j<nums2.length;j++){
                if(nums1[i]<nums2[j]){greater=nums2[j];break;}
            }
            res[i]=greater;
        }
        return res;
    }
}

Optimal: 
Idea: Add elements to stack if < peek else pop & map that poped num with curr num. It indicates curr num is next greater element of poped num.

TC:O(m+n) SC:O(n)

class Solution {
    public int[] nextGreaterElement(int[] nums1, int[] nums2) {
        int res[] = new int[nums1.length];
        HashMap<Integer,Integer> map= new HashMap<>(); // integer,index 
        ArrayDeque<Integer> stk = new ArrayDeque<>();
        for(int n:nums2){
            while(!stk.isEmpty() && stk.peek()<n){
                map.put(stk.pop(),n);
            }
            stk.push(n);
        }
        for(int i=0;i<nums1.length;i++){
            res[i] = map.getOrDefault(nums1[i],-1);
        }
        return res;
    }
}
