You are given an integer array nums and an integer target.

You want to build an expression out of nums by adding one of the symbols '+' and '-' before each integer in nums and then concatenate all the integers.

For example, if nums = [2, 1], you can add a '+' before 2 and a '-' before 1 and concatenate them to build the expression "+2-1".
Return the number of different expressions that you can build, which evaluates to target. 

Example 1:

Input: nums = [1,1,1,1,1], target = 3
Output: 5
Explanation: There are 5 ways to assign symbols to make the sum of nums be target 3.
-1 + 1 + 1 + 1 + 1 = 3
+1 - 1 + 1 + 1 + 1 = 3
+1 + 1 - 1 + 1 + 1 = 3
+1 + 1 + 1 - 1 + 1 = 3
+1 + 1 + 1 + 1 - 1 = 3

Idea: Use caching. At each level we have 2 decision - or + that number. using that do dfs and save the result for index-total so that we can use it
later without computing.

TC: O(n x sum(arr)) SC:O(n)

class Solution {
    public int findTargetSumWays(int[] nums, int target) {
        HashMap<String,Integer> cache = new HashMap<>(); //string:index-total value:no. of ways
        return backtrack(cache,0,nums,target,0);
    }
    public int backtrack(HashMap<String,Integer> cache, int i, int nums[] , int target,int total)   {
        if(i==nums.length){
            return total==target?1:0;
        }
        String key = i+"-"+total;
        if(cache.containsKey(key)) return cache.get(key);
        cache.put(key,backtrack(cache,i+1,nums,target,total+nums[i])+
                 backtrack(cache,i+1,nums,target,total-nums[i]));
        
        return cache.get(key);
    }
}
