In a town, there are n people labeled from 1 to n. There is a rumor that one of these people is secretly the town judge.

If the town judge exists, then:

The town judge trusts nobody.
Everybody (except for the town judge) trusts the town judge.
There is exactly one person that satisfies properties 1 and 2.
You are given an array trust where trust[i] = [ai, bi] representing that the person labeled ai trusts the person labeled bi.

Return the label of the town judge if the town judge exists and can be identified, or return -1 otherwise.

Example 1:

Input: n = 2, trust = [[1,2]]
Output: 2

Brute: Add all candidates to set & map every person with its trust. At last iterate over candidates and if it has mapping then it is not judge else it is judge. 
TC:O(n) SC:O(n)

Optimal: Inc freq array for every candidate of judge and dec freq for each person so that we can dec freq of judge if it trusts someone. Atlast check if anyone has freq
n-1 as judge would be having that then that is judge.

TC:O(n) SC:O(n)

class Solution {
    public int findJudge(int n, int[][] trust) {
        int freq[] = new int [n+1];
        for(int a[]:trust){
            freq[a[0]]--;
            freq[a[1]]++;
        }
        for(int a[]:trust){
            if(freq[a[1]] == n-1) return a[1];
        }
        return n==1?1:-1;
    }
}
