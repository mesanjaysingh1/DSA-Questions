Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all
the intervals in the input. 

Example 1:

Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].

Idea: Sort input based on 1st value of array. Check if 2nd val of array is < next array if yes then add to list. If no then take min of 0th index and max of 1st 
add it to next array val.

TC:O(nlogn) SC:O(n)

class Solution {
    public int[][] merge(int[][] intervals) {
       ArrayList<int[]> list = new ArrayList<>();
       Arrays.sort(intervals,(int a[],int b[])->a[0]-b[0]);
       for(int i=0;i<intervals.length;i++){
           if(i==intervals.length-1 || intervals[i][1]<intervals[i+1][0]){
               list.add(intervals[i]);
           }
           else{
               intervals[i+1][0]=Math.min(intervals[i][0],intervals[i+1][0]);
               intervals[i+1][1]=Math.max(intervals[i][1],intervals[i+1][1]);
           }
       } 
     int res[][] = new int [list.size()][2];
     for(int i=0;i<list.size();i++){res[i]=list.get(i);}
      return res;
    }
}
