You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).

You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.

Example 1:

Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
Output: [[7,4,1],[8,5,2],[9,6,3]]

Idea: rotate outer square layer then inner .... Use left boundary, right, bottom, top for that

TC:O(N^2) N->no. of elements in matrix. SC:O(1)

class Solution {
    public void rotate(int[][] matrix) {
        int l=0,r=matrix[0].length-1;
        while(l<r){
            int top=l,bottom=r;
            for(int i=0;i<(r-l);i++){
                int topleft = matrix[top][l+i];
                matrix[top][l+i]=matrix[bottom-i][l];
                matrix[bottom-i][l]=matrix[bottom][r-i];
                matrix[bottom][r-i]=matrix[top+i][r];
                matrix[top+i][r]= topleft;
            }
            l++;r--;
        }
        
    }
}
