Given an m x n binary matrix filled with 0's and 1's, find the largest square containing only 1's and return its area. 

Example 1:

Input: matrix = [["1","0","1","0","0"],["1","0","1","1","1"],["1","1","1","1","1"],["1","0","0","1","0"]]
Output: 4

Idea: We will store length of square from each position possible. From each pos check if right,down, diag  min length of square then add it to 
curr pos dp along with 1 if & only if curr pos is 1.

TC:O(mxn) SC:O(mxn)

class Solution {
    public int maximalSquare(char[][] matrix) {
        int r=matrix.length,c=matrix[0].length,res=0;
        int [][] dp = new int [r][c];
        for(int i=0;i<r;i++){
            for(int j=0;j<c;j++){
                if(dp[i][j]==0){
                    helper(i,j,dp,matrix);
                }
                res=Math.max(res,dp[i][j]);
            }
        }
        return res*res;
    }
    public int helper(int r,int c,int[][]dp,char [][]matrix){
        if(r==matrix.length||r<0||c==matrix[0].length||c<0){return 0;}
        if(dp[r][c]!=0) return dp[r][c];
        
        int down = helper(r+1,c,dp,matrix);int right = helper(r,c+1,dp,matrix);
        int diag = helper(r+1,c+1,dp,matrix);
        
        if(matrix[r][c]=='1'){
            dp[r][c] = 1 + Math.min(Math.min(down,right),diag);
        }
        return dp[r][c];
    }
}
