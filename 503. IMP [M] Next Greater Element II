Given a circular integer array nums (i.e., the next element of nums[nums.length - 1] is nums[0]), return the next greater number for every element in nums.

The next greater number of a number x is the first greater number to its traversing-order next in the array, which means you could search circularly to 
find its next greater number. If it doesn't exist, return -1 for this number. 

Example 1:

Input: nums = [1,2,1]
Output: [2,-1,2]
Explanation: The first 1's next greater number is 2; 
The number 2 can't find next greater number. 
The second 1's next greater number needs to search circularly, which is also 2.

Brute:
Idea: Do circular travesal using % operator. TC:O(n^2)

class Solution {
    public int[] nextGreaterElements(int[] nums) {
        int res [] = new int[nums.length];
        Arrays.fill(res,-1);
        for(int i=0;i<nums.length;i++){
            for(int j=1;j<nums.length;j++){
                if(nums[(i+j)%nums.length] > nums[i]){
                    res[i] = nums[(i+j)%nums.length]; break;
                }
            }
        }
        return res;
    }
}

Optimal:
Do two traversal from right and remove num from stack if <= curr. This also indicates we don't need this no. in future as curr is > so if circular traversal is done
for any num this curr num is enough. Add curr num to stack.

TC:O(2*N) SC:O(n)

class Solution {
    public int[] nextGreaterElements(int[] nums) {
        int n= nums.length;int res [] = new int[n];
        ArrayDeque<Integer> stk = new ArrayDeque<>();
        for(int i=2*n-1;i>=0;i--){
            while(!stk.isEmpty() && stk.peek()<=nums[i%n]){
                stk.pop();
            }
            res[i%n] = stk.isEmpty()?-1:stk.peek();
            stk.push(nums[i%n]);
        }
        return res;
    }
}
