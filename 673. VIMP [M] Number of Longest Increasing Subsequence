Given an integer array nums, return the number of longest increasing subsequences.

Notice that the sequence has to be strictly increasing. 

Example 1:

Input: nums = [1,3,5,4,7]
Output: 2
Explanation: The two longest increasing subsequences are [1, 3, 4, 7] and [1, 3, 5, 7].

Idea: Do backward iteration & get lis at each position and store it in dp[]. At same time calculate how many lis can be formed from there of max len i.e count.
After each index is completed compare its curr_lis with res_lis if > change res_lis & its count & if res_lis== curr lis then count+=curr_count.

TC:O(n^2) SC:O(n)

class Solution {
    public int findNumberOfLIS(int[] nums) {
        HashMap<Integer,int[]> map = new HashMap<>(); // index,[maxlis,count]
        map.put(nums.length-1,new int[]{1,1});
        int res=1,Allmaxlis=1;
        for(int r=nums.length-2;r>=0;r--){
            int maxLis=1,maxCount=1; // current index maxlis and max count
            for(int i=r+1;i<nums.length;i++){
                if(nums[i]>nums[r]){
                    int [] var = map.get(i); int lis = var[0] ,count = var[1];
                    if(lis +1 > maxLis){
                        maxLis = lis+1; maxCount=count;
                    }
                    else if(lis+1 == maxLis){
                        maxCount += count;
                    }
                }
            }
            map.put(r,new int[]{maxLis,maxCount});
            if(maxLis>Allmaxlis){
                Allmaxlis = maxLis; res = maxCount;
            }
            else if(maxLis==Allmaxlis){
                res += maxCount;
            }
        }
        return res;

    }
}
