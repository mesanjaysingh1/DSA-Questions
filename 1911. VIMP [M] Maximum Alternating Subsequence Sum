The alternating sum of a 0-indexed array is defined as the sum of the elements at even indices minus the sum of the elements at odd indices.

For example, the alternating sum of [4,2,5,3] is (4 + 5) - (2 + 3) = 4.
Given an array nums, return the maximum alternating sum of any subsequence of nums (after reindexing the elements of the subsequence).

A subsequence of an array is a new array generated from the original array by deleting some elements (possibly none) without changing the remaining elements' 
relative order. For example, [2,7,4] is a subsequence of  [4,2,3,7,2,1,4] (the underlined elements), while [2,4,2] is not.

Example 1:

Input: nums = [4,2,5,3]
Output: 7
Explanation: It is optimal to choose the subsequence [4,2,5] with alternating sum (4 + 5) - 2 = 7.

Idea: We can add a val or skip it. So start from last and if adding it with oddsum makes it greater store it, else skip. Similarly for Oddsum.

TC:O(n) SC:O(1)
class Solution {
    public long maxAlternatingSum(int[] nums) {
      long sumEven=0,sumOdd=0;
      for(int i=nums.length-1;i>=0;i--){
          long tempEven = Math.max(sumOdd+nums[i],sumEven);
          long tempOdd = Math.max(sumEven-nums[i],sumOdd);
          sumEven=tempEven; sumOdd=tempOdd;
      }  
        return sumEven;
    }
}
