You are given the root of a binary tree containing digits from 0 to 9 only.

Each root-to-leaf path in the tree represents a number.

For example, the root-to-leaf path 1 -> 2 -> 3 represents the number 123.
Return the total sum of all root-to-leaf numbers. Test cases are generated so that the answer will fit in a 32-bit integer.

A leaf node is a node with no children.
Example 1:

Input: root = [1,2,3]
Output: 25
Explanation:
The root-to-leaf path 1->2 represents the number 12.
The root-to-leaf path 1->3 represents the number 13.
Therefore, sum = 12 + 13 = 25.

Idea: Do dfs and if found leaf node then add currSum to res. For making eg 4 to 49 4*10+9 and to remove 9 from 49 -> 49/10 technique.

TC:O(h) SC:O(h)

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int res=0;
    public int sumNumbers(TreeNode root) {
        dfs(root,0);
        return res;
    }
    public void dfs(TreeNode root,int currSum){
        if(root==null) return;
        if(root.left==null && root.right==null){
            res+= (currSum*10)+root.val;return ;
        }
        currSum=(currSum*10)+root.val;
        dfs(root.left,currSum);
        dfs(root.right,currSum);
        currSum=currSum/10;
    }
}
