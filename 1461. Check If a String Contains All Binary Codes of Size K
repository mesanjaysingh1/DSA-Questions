Given a binary string s and an integer k, return true if every binary code of length k is a substring of s. Otherwise, return false.

Example 1:

Input: s = "00110110", k = 2
Output: true
Explanation: The binary codes of length 2 are "00", "01", "10" and "11". They can be all found as substrings at indices 0, 1, 3 and 2 respectively.

Idea: add each string of lenth k at each position to set & at last check if its size == 2 pow k (i.e no of binary combinations possible)

TC:O(n) SC:O(n)

class Solution {
    public boolean hasAllCodes(String s, int k) {
        HashSet<String> set = new HashSet<>();
        for(int i=0;i<=s.length()-k;i++){
            set.add(s.substring(i,i+k));
        }
        System.out.print(set.size());
        return set.size()==Math.pow(2,k) ? true:false;
    }
}
