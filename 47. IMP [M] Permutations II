Given a collection of numbers, nums, that might contain duplicates, return all possible unique permutations in any order. 

Example 1:

Input: nums = [1,1,2]
Output:
[[1,1,2],
 [1,2,1],
 [2,1,1]]

Idea: Create map of nums,freq so that duplicates can be taken as per freqn. Take keys (i.e nums) and add to list then reduce its freq & do dfs_backtrack then inc its
freq.

TC:O(n!) as n! permutations are possible for n distinct nums. SC:(n)

class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();
        List<Integer> list = new ArrayList<>();
        HashMap<Integer,Integer> map = new HashMap<>();//num,freqn
        for(int n:nums){map.put(n,map.getOrDefault(n,0)+1); }
       backtrack(map,list,res,nums); 
       return res;
    }
public void backtrack(HashMap<Integer,Integer> map,List<Integer>list,List<List<Integer>>res,int[] nums){
        if(list.size()==nums.length) {res.add(new ArrayList<>(list)); return;}
        for(int n: map.keySet()) {
            if(map.get(n)>0) {
            list.add(n);
            map.put(n,map.get(n)-1);
            backtrack(map,list,res,nums);
            map.put(n,map.get(n)+1);
            list.remove(list.size()-1);
            }
        }
        
    }
}
