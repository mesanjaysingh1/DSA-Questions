Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.

k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, 
in the end, should remain as it is.

You may not alter the values in the list's nodes, only nodes themselves may be changed. 

Example 1:

Input: head = [1,2,3,4,5], k = 2
Output: [2,1,4,3,5]

Brute/ Not Optimal:
Idea: Push k element onto stack then pop and join.

TC:O(n^2) SC:O(k)

class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
        ListNode curr = head;ListNode dummy=new ListNode(0); 
        ListNode res = null;
        ArrayDeque<ListNode> stk = new ArrayDeque<>();
        while(curr!=null){
            ListNode start =curr;
            for(int i=0;i<k;i++){
                stk.push(curr);
                if(curr.next==null && i!=k-1) {dummy.next=start; return res;}
                curr=curr.next;
            }
            while(!stk.isEmpty()){
                ListNode val = stk.pop(); val.next=null;
                dummy.next=val;
                dummy=dummy.next; if(res==null){res=dummy;}
            }
        }
        return res;
        
    }
}

Optimal: Have before and after ptr stored of group of size k. After reversing group connect before ptr with kth node and change before ptr to prev before ptr.next
TC:O(n*k) SC:O(1)

class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
        ListNode dummy=new ListNode(0,head); 
        ListNode groupPrev = dummy;
        while(true){
            ListNode kth = getKth(groupPrev,k);
            if(kth ==null){ break;}
            ListNode groupNext = kth.next,prev=kth.next, curr=groupPrev.next , tmp =null;
            while(curr!=groupNext){
                tmp = curr.next;
                curr.next=prev;
                prev = curr;
                curr=tmp;
            }
            tmp = groupPrev.next;
            groupPrev.next = kth;
            groupPrev= tmp;
        }
        return dummy.next;
        
    }
    public ListNode getKth(ListNode curr , int k){
        while(k-->0 && curr!=null){
            curr=curr.next; 
        }
        return curr;
    }
}
