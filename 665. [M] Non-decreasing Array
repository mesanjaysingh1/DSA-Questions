Given an array nums with n integers, your task is to check if it could become non-decreasing by modifying at most one element.

We define an array is non-decreasing if nums[i] <= nums[i + 1] holds for every i (0-based) such that (0 <= i <= n - 2). 

Example 1:

Input: nums = [4,2,3]
Output: true
Explanation: You could modify the first 4 to 1 to get a non-decreasing array.

Idea: Check pair by pair, if i+1 < i then check if i can be made = to i+1 so that we get smaller value for next iteration. We can do this if i+1 >= i-1 eg:[1,4,2]
otherwise change i+1 to ith value & make flag as true.

TC:O(n) SC:O(1)

class Solution {
    public boolean checkPossibility(int[] nums) {
        boolean changed=false;
        for(int i=0;i<nums.length-1;i++){
          if(nums[i+1]>=nums[i]){continue;}  
          else if(changed){return false;}
          if(i==0 || nums[i-1]<=nums[i+1]){
              nums[i]=nums[i+1];
          }
          else{
              nums[i+1]=nums[i];
          }
          changed=true;
        }
        return true;
    }
}
