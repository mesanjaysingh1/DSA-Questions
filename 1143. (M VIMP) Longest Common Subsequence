Given two strings text1 and text2, return the length of their longest common subsequence. If there is no common subsequence, return 0.

A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the
relative order of the remaining characters.

For example, "ace" is a subsequence of "abcde".
A common subsequence of two strings is a subsequence that is common to both strings.
Example 1:

Input: text1 = "abcde", text2 = "ace" 
Output: 3  
Explanation: The longest common subsequence is "ace" and its length is 3.

Idea: Imagine both string on 2d matrix and for each match +1 & go diagonally & if mismatch get max of bottom&right . Work from last cell to 1st.

TC: O(mxn) Sc:O(mxn)

class Solution {
    public int longestCommonSubsequence(String text1, String text2) {
        int [] [] arr = new int[text1.length()+1][text2.length()+1];
        for(int i=text1.length()-1;i>=0;i--){
            for(int j=text2.length()-1;j>=0;j--){
                if(text1.charAt(i)==text2.charAt(j)){
                    arr[i][j]=1+arr[i+1][j+1];
                }
                if(text1.charAt(i)!=text2.charAt(j)){
                    arr[i][j]=Math.max(arr[i+1][j],arr[i][j+1]);
                }
            }
        }
        return arr[0][0];
    }
}
