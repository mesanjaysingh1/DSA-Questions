Given an array of points where points[i] = [xi, yi] represents a point on the X-Y plane and an integer k, return the k closest points to the origin (0, 0).

The distance between two points on the X-Y plane is the Euclidean distance (i.e., âˆš(x1 - x2)2 + (y1 - y2)2).

You may return the answer in any order. The answer is guaranteed to be unique (except for the order that it is in).

Example 1:


Input: points = [[1,3],[-2,2]], k = 1
Output: [[-2,2]]
Explanation:
The distance between (1, 3) and the origin is sqrt(10).
The distance between (-2, 2) and the origin is sqrt(8).
Since sqrt(8) < sqrt(10), (-2, 2) is closer to the origin.
We only want the closest k = 1 points from the origin, so the answer is just [[-2,2]].

Idea: add array element to maxheap i.e by making its distn as -ve while adding.
then while adding if size>k remove top element i.e max distn till now one. at last we'll have maxheap with k

class Solution {
    public int[][] kClosest(int[][] points, int k) {
      PriorityQueue <int[]> maxheap = new PriorityQueue<>(
      (a,b)->Integer.compare(b[0]*b[0]+b[1]*b[1],a[0]*a[0]+a[1]*a[1]));
        
      int[][] res = new int[k][2];  
      for(int [] a : points){
          maxheap.offer(a);
          if(maxheap.size()>k) maxheap.poll();
      }
      for(int i=0;i<k;i++){
          int temp[]=maxheap.poll();
          res[i][0]=temp[0];res[i][1]=temp[1];
      }
        return res;
        
    }
}
