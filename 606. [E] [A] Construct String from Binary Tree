Given the root of a binary tree, construct a string consisting of parenthesis and integers from a binary tree with the preorder traversal way, and return it.

Omit all the empty parenthesis pairs that do not affect the one-to-one mapping relationship between the string and the original binary tree.

Example 1:

Input: root = [1,2,3,4]
Output: "1(2(4))(3)"
Explanation: Originally, it needs to be "1(2(4)())(3()())", but you need to omit all the unnecessary empty parenthesis pairs. And it will be "1(2(4))(3)"

Idea: Do preorder traversal add ( at start and ) at end . In between check if left null&right !null true then add () that shows that left=null and right!null

TC:O(n) SC:O(h)
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    String res="";
    public String tree2str(TreeNode root) {
      preorder(root);
      return res.substring(1,res.length()-1);  
    }
    public void preorder(TreeNode r){
        if(r==null) return;
        res+="(";
        res+=r.val;
        if(r.left==null && r.right!=null){res+="()";}
        preorder(r.left);
        preorder(r.right);
        res+=")";
    }
}
