You have a set which contains all positive integers [1, 2, 3, 4, 5, ...].

Implement the SmallestInfiniteSet class:

SmallestInfiniteSet() Initializes the SmallestInfiniteSet object to contain all positive integers.
int popSmallest() Removes and returns the smallest integer contained in the infinite set.
void addBack(int num) Adds a positive integer num back into the infinite set, if it is not already in the infinite set.
 
Example 1:

Input
["SmallestInfiniteSet", "addBack", "popSmallest", "popSmallest", "popSmallest", "addBack", "popSmallest", "popSmallest", "popSmallest"]
[[], [2], [], [], [], [1], [], [], []]
Output
[null, null, 1, 2, 3, null, 1, 4, 5]

Explanation
SmallestInfiniteSet smallestInfiniteSet = new SmallestInfiniteSet();
smallestInfiniteSet.addBack(2);    // 2 is already in the set, so no change is made.
smallestInfiniteSet.popSmallest(); // return 1, since 1 is the smallest number, and remove it from the set.
smallestInfiniteSet.popSmallest(); // return 2, and remove it from the set.
smallestInfiniteSet.popSmallest(); // return 3, and remove it from the set.
smallestInfiniteSet.addBack(1);    // 1 is added back to the set.
smallestInfiniteSet.popSmallest(); // return 1, since 1 was added back to the set and
                                   // is the smallest number, and remove it from the set.
smallestInfiniteSet.popSmallest(); // return 4, and remove it from the set.
smallestInfiniteSet.popSmallest(); // return 5, and remove it from the set.

Idea: Remove min from minheap before that just add val into minh and inc val this will ensure that we always return atleast lowest value. For adding check
if it was already popped from hashset if yes then add it again else dont as we will automatically add it.

TC:O(log n) pop and add are logn operation. SC:O(n) n=total nums

class SmallestInfiniteSet {
    PriorityQueue<Integer> minh;
    HashSet<Integer> popped;
    int val ;
    public SmallestInfiniteSet() {
        minh = new PriorityQueue<>(); val=1; popped = new HashSet<>();
    }
    
    public int popSmallest() {
        minh.add(val); popped.add(minh.peek()); val++;
        return minh.poll();
    }
    
    public void addBack(int num) {
        if(popped.contains(num)) minh.add(num); popped.remove(num);
    }
}
