Desc: https://leetcode.com/problems/copy-list-with-random-pointer/
Example 1:

Input: head = [[7,null],[13,0],[11,4],[10,2],[1,0]]
Output: [[7,null],[13,0],[11,4],[10,2],[1,0]]

Idea: Make hashmap of old linked list as key and new nodes without connection as value.  Then for new nodes make next & random connection using hashmap to get it from old linked list.

/*
// Definition for a Node.
class Node {
    int val;
    Node next;
    Node random;

    public Node(int val) {
        this.val = val;
        this.next = null;
        this.random = null;
    }
}
*/

class Solution {
    public Node copyRandomList(Node head) {
        Node curr=head;
        HashMap<Node,Node> map = new HashMap<>();
        while(curr!=null){
            map.put(curr,new Node(curr.val));curr=curr.next;
        }
        curr=head;
        while(curr!=null){
            map.get(curr).next = map.get(curr.next);
            map.get(curr).random = map.get(curr.random);
            curr=curr.next;
        }
        return map.get(head);
    }
}
