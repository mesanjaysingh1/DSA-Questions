Given an m x n grid of characters board and a string word, return true if word exists in the grid.

The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. 
The same letter cell may not be used more than once.
Example 1:

Input: board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "ABCCED"
Output: true

Idea: compare each row,col with start of word. If matches add garbage value to curr word [in order to make sure that we don't use same char twice dur search ]&
checks its left,right,up,down using backtracking. 

class Solution {
    public boolean exist(char[][] board, String word) {
        int m=board.length;
        int n = board[0].length;
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(backtrack(board,word,i,j,0))return true;
            }
        }
        return false;
    }
    public boolean backtrack(char[][]board,String word,int m,int n, int curr){
      if(curr==word.length()) return true;
      if(m<0|| n<0 || m==board.length|| n==board[0].length){
          return false;
      }
      boolean check =false;
      if(board[m][n]==word.charAt(curr)){
          board[m][n]+=100;
          check = backtrack(board,word,m+1,n,curr+1) ||
              backtrack(board,word,m,n+1,curr+1)||
              backtrack(board,word,m-1,n,curr+1) ||
              backtrack(board,word,m,n-1,curr+1);
          board[m][n]-=100;
      }
      return check;
        
    }
}
