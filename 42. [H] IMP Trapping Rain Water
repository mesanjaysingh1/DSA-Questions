Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.

Example 1:

Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) 
are being trapped.

Idea: Find max bar index and then whenever there is dip from left side add (lmax_height-curr_height) to res & if curr height>lmax then change it. 
Now do it similary from rightmost side till max bar index.

TC: O(n) SC:O(1)

class Solution {
    public int trap(int[] height) {
        int l=0,r=height.length-1,rmax=0,rmax_index=-1,lmax=height[0],res=0;
        for(int i=0;i<height.length;i++){
            if(height[i]>rmax){rmax_index=i;rmax=height[i];}
        }
        for(int i=1;i<rmax_index;i++){
            if(height[i]>lmax){lmax=height[i];}
            else{res+=lmax-height[i];}
        }
        rmax=height[height.length-1];
        for(int i=height.length-2;i>rmax_index;i--){
            if(height[i]>rmax){rmax=height[i];}
            else{res+=rmax-height[i];}
        }
        return res;
    }
}
