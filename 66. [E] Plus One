You are given a large integer represented as an integer array digits, where each digits[i] is the ith digit of the integer. 
The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading 0's.

Increment the large integer by one and return the resulting array of digits. 

Example 1:

Input: digits = [1,2,3]
Output: [1,2,4]
Explanation: The array represents the integer 123.
Incrementing by one gives 123 + 1 = 124.
Thus, the result should be [1,2,4].

Idea: Do +1 addition to new res array till last num becomes >9 after + operatn. If last operation was with carry return new array[with +1 length]
else return old array.

TC:O(n) SC:O(n)

class Solution {
    public int[] plusOne(int[] digits) {
        int n = digits.length,carry=1; int [] res = new int[n+1]; 
        for(int i=n-1;i>=0;i--){
            int sum = digits[i] + carry;
            if(sum > 9){
                digits[i] = sum%10;
                res[i+1] = digits[i];
                carry=1;
            }
            else{ digits[i]=sum; carry=0; break;}
        }
        if(carry==1){ res[0]=1; return res;}
        return digits;

    }
}
