You are given a string s and an integer k. You can choose any character of the string and change it to any other uppercase English character. You can perform this operation at most k times.

Return the length of the longest substring containing the same letter you can get after performing the above operations.

Example 1:

Input: s = "ABAB", k = 2
Output: 4
Explanation: Replace the two 'A's with two 'B's or vice versa.

Idea: Use sliding window. Move left pointer  if window size - max freqn char > k i.e less freq char to be replaced is more than k. else compute res &move right pointer

class Solution {
    public int characterReplacement(String s, int k) {
        int arr[]= new int[26];
        int left=0,right=0,res=0,max=0;
        for(right=0;right<s.length();right++){
            arr[s.charAt(right)-'A']++;
            max=Math.max(max,arr[s.charAt(right)-'A']);
            if(right-left+1-max>k){
                arr[s.charAt(left)-'A']--;left++;
            }
            res=Math.max(res,right-left+1);
            
        }
        return res;
    }
}
