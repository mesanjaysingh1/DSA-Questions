Given the head of a linked list and an integer val, remove all the nodes of the linked list that has Node.val == val, and return the new head. 

Example 1:

Input: head = [1,2,6,3,4,5,6], val = 6
Output: [1,2,3,4,5]

Idea : Create dummy node to handle edge cases like 1st value removal, etc.

TC:O(n) SC:O(1)
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode removeElements(ListNode head, int val) {
        if(head==null) return head;
        ListNode dummy = new ListNode(0,head);
        ListNode curr = head,prev=dummy;
        while(curr!=null){
            if(curr.val==val){prev.next = curr.next;}
            else{prev=curr;}
            curr=curr.next;
        }
        return dummy.next;
    }
}
