You are given an array of integers nums and an integer target.

Return the number of non-empty subsequences of nums such that the sum of the minimum and maximum element on it is less or equal to target. 
Since the answer may be too large, return it modulo 109 + 7.

 

Example 1:

Input: nums = [3,5,6,7], target = 9
Output: 4
Explanation: There are 4 subsequences that satisfy the condition.
[3] -> Min value + max value <= target (3 + 3 <= 9)
[3,5] -> (3 + 5 <= 9)
[3,5,6] -> (3 + 6 <= 9)
[3,6] -> (3 + 6 <= 9)

Idea: Sort array & check if left + right num > target then right--. else count += 2 pow(num of element to right of left ptr).

TC: O(n) SC:O(n)

class Solution {
    public int numSubseq(int[] nums, int target) {
        int count=0,right=nums.length-1, mod=(int)1e9 + 7 ;
        int pow[] = new int [nums.length];
        Arrays.sort(nums);
        pow[0]=1;
        for(int i=1;i<nums.length;i++){pow[i] = (pow[i-1]*2)%mod;}// pow array
        
        for(int left=0;left<nums.length;left++){
            while( left<=right && (nums[left]+nums[right])>target ){
                right--;
            }
            if(left<=right){
                count= (count+pow[right-left]) % mod;
            }
        }
        return count;
    }
}
