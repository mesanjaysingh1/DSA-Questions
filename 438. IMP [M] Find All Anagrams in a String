Given two strings s and p, return an array of all the start indices of p's anagrams in s. You may return the answer in any order.

An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.

Example 1:

Input: s = "cbaebabacd", p = "abc"
Output: [0,6]
Explanation:
The substring with start index = 0 is "cba", which is an anagram of "abc".
The substring with start index = 6 is "bac", which is an anagram of "abc".

Idea: Check anagram for 1st length s using 2 maps & then using sliding window add right char freq & decrement left char freq and check if 2 maps are equal.

TC:(26 * n) n=length of s and 26 because comparision of 2 maps will have worst case 26 chars. SC:O(n)

class Solution {
    public List<Integer> findAnagrams(String s, String p) {
        if(p.length()>s.length()) return new ArrayList();
        ArrayList<Integer> res = new ArrayList<>();
        HashMap<Character,Integer> pCount = new HashMap<>();
        HashMap<Character,Integer> sCount = new HashMap<>();
        for(int i=0;i<p.length();i++){
            pCount.put(p.charAt(i),pCount.getOrDefault(p.charAt(i),0)+1);
            sCount.put(s.charAt(i),sCount.getOrDefault(s.charAt(i),0)+1);
        }
        int l=0;
        if(pCount.equals(sCount)){res.add(l);}
        
        for(int r=p.length();r<s.length();r++){
            sCount.put(s.charAt(r),sCount.getOrDefault(s.charAt(r),0)+1);
            sCount.put(s.charAt(l),sCount.getOrDefault(s.charAt(l),0)-1);

            if(sCount.get(s.charAt(l))==0){sCount.remove(s.charAt(l));}
            l++;
            if(pCount.equals(sCount)){res.add(l);}
            

        }
        return res;
    }
}
