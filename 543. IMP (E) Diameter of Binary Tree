Idea: Go to leftmost side then compute diameter for root of it. return max height of left/right so as to check if another diameter > curr exist

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int res=-1; 
    public int diameterOfBinaryTree(TreeNode root) {
        dfs(root);
        return res;
    }
    private int dfs(TreeNode root){
            if(root==null) return -1;
            int left = dfs(root.left);
            int right= dfs(root.right);
            res= Math.max(res,2+left+right);
            return 1+Math.max(left,right);
        }
    
}
