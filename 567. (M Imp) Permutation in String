Given two strings s1 and s2, return true if s2 contains a permutation of s1, or false otherwise.

In other words, return true if one of s1's permutations is the substring of s2.

Example 1:

Input: s1 = "ab", s2 = "eidbaooo"
Output: true
Explanation: s2 contains one permutation of s1 ("ba").

Idea: Store freq of S1 in array. Slide window of size s1 in s2 if char matches reduce freq and char count. If char ccount becomes 0 return true else check 
if window size has been reached then move left & inc its freqn & inc char_count if left char was judged for char_count dec in first half.

class Solution {
    public boolean checkInclusion(String s1, String s2) {
      int count[] = new int[26];
       for(int i=0;i<s1.length();i++){
           count[s1.charAt(i)-'a']++;
       }
       int left=0,right=0,char_count=s1.length();
       while(right<s2.length()){
           if(count[s2.charAt(right++)-'a']-->0){
               char_count--;
           }
           if(char_count==0){
               return true;
           }
           if( (right-left)==s1.length() && count[s2.charAt(left++)-'a']++>=0){
               char_count++;
           }
       }
        return false;
    }
}
