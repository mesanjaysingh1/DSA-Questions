Given an array of distinct integers nums and a target integer target, return the number of possible combinations that add up to target.

The test cases are generated so that the answer can fit in a 32-bit integer.

Example 1:

Input: nums = [1,2,3], target = 4
Output: 7
Explanation:
The possible combination ways are:
(1, 1, 1, 1)
(1, 1, 2)
(1, 2, 1)
(1, 3)
(2, 1, 1)
(2, 2)
(3, 1)
Note that different sequences are counted as different combinations.
Idea: Do bottom up dp, check for all nums if that was target how many ways we could compute it from array nums being used. 

TC:O(m*n) SC:(m) m=target n=length of array 

class Solution {
    public int combinationSum4(int[] nums, int target) {
        int [] dp = new int[target+1]; dp[0]=1;
        for(int i=1;i<target+1;i++){
            for(int n:nums){
                if(i-n >=0) dp[i]+=dp[i-n];
            }
        }
        return dp[target];
    }
}
