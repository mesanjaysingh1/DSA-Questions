Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sum to target.

Each number in candidates may only be used once in the combination.

Note: The solution set must not contain duplicate combinations.
Example 1:

Input: candidates = [10,1,2,7,6,1,5], target = 8
Output: 
[
[1,1,6],
[1,2,5],
[1,7],
[2,6]
]

Idea : Sort input array. Include a no on one side then repeated in array too & on other side of tree don't include first no. and move forward.

class Solution {
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        Arrays.sort(candidates);
        List<List<Integer>> res = new ArrayList<>();
        backtrack(res,new ArrayList<Integer>(),0,candidates,target);
        return res;
    }
    public void backtrack(List<List<Integer>> res,List<Integer> list, int start,int [] candidates,int target){
        if(target==0) res.add(new ArrayList(list));
        if(target<0 ) return ;
        for(int i=start;i<candidates.length;i++){
        if(i>start && candidates[i]==candidates[i-1]) continue;    
        list.add(candidates[i]);
        backtrack(res,list,i+1,candidates,target-candidates[i]);
        list.remove(list.size()-1);
        }
        
        
    }
}
