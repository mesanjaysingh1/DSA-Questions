There are n gas stations along a circular route, where the amount of gas at the ith station is gas[i].

You have a car with an unlimited gas tank and it costs cost[i] of gas to travel from the ith station to its next (i + 1)th station. You begin the journey with
an empty tank at one of the gas stations.

Given two integer arrays gas and cost, return the starting gas station's index if you can travel around the circuit once in the clockwise direction, otherwise
return -1. If there exists a solution, it is guaranteed to be unique 

Example 1:

Input: gas = [1,2,3,4,5], cost = [3,4,5,1,2]
Output: 3
Explanation:
Start at station 3 (index 3) and fill up with 4 unit of gas. Your tank = 0 + 4 = 4
Travel to station 4. Your tank = 4 - 1 + 5 = 8
Travel to station 0. Your tank = 8 - 2 + 1 = 7
Travel to station 1. Your tank = 7 - 3 + 2 = 6
Travel to station 2. Your tank = 6 - 4 + 3 = 5
Travel to station 3. The cost is 5. Your gas is just enough to travel back to station 3.
Therefore, return 3 as the starting index.

Brute: O(n^2)

class Solution {
    public int canCompleteCircuit(int[] gas, int[] cost) {
        
       for(int i=0;i<gas.length;i++){
           int index=i,fund_avail=gas[index]-cost[index];
           while(fund_avail>=0){
               if(index==gas.length-1){index=0;}
               else{index++;}
               if(index==i){return index;}
               fund_avail+=gas[index]-cost[index];
           }
       } 
        return -1;
    }
}

Optimal:We first check if gas sum>= cost sum if yes then we def have an ans. We become greedy & check from each index if adding diff to total doesn't make the total 
-ve. If it does then all prev index cannot be ans as we make total 0 after we find total -ve so that we can check for ans from next index.

O(n) 

class Solution {
    public int canCompleteCircuit(int[] gas, int[] cost) {
        int gas_sum=0,cost_sum=0; for(int g:gas){gas_sum+=g;} for(int c:cost){cost_sum+=c;}
        if(gas_sum<cost_sum) return -1;
       int start=0,total=0;
       for(int i=0;i<gas.length;i++){
           total+=gas[i]-cost[i];
           if(total<0){total=0;start=i+1;}
       } 
        return start;
    }
}
