Given an n x n matrix where each of the rows and columns is sorted in ascending order, return the kth smallest element in the matrix.

Note that it is the kth smallest element in the sorted order, not the kth distinct element.

You must find a solution with a memory complexity better than O(n2).

 

Example 1:

Input: matrix = [[1,5,9],[10,11,13],[12,13,15]], k = 8
Output: 13
Explanation: The elements in the matrix are [1,5,9,10,11,12,13,13,15], and the 8th smallest number is 13

Brute: Add k elements to maxh and remove top when size==k && num < top of maxh. 
TC:O(n*m*logk) SC:O(k)

class Solution {
    public int kthSmallest(int[][] matrix, int k) {
        PriorityQueue<Integer> maxh = new PriorityQueue<>((a,b)->b-a);
        for(int i=0;i<matrix.length;i++){
            for(int j=0;j<matrix[0].length;j++){
                if(maxh.size()<k){ maxh.add(matrix[i][j]);}
                else if(maxh.size()==k && matrix[i][j]<maxh.peek()){
                    maxh.poll(); maxh.add(matrix[i][j]);
                }
            }
        }
        return maxh.peek();
    }
}

Optimal: Using Binary search
Idea: Find no.s from bottom left to top right which are less than = mid. Mid is calculated using top left, bottom right. We try to find mid in range[low,high] while
we have >=k elements less than mid.

class Solution {
    public int kthSmallest(int[][] matrix, int k) {
        int n=matrix.length,l=matrix[0][0],h=matrix[n-1][n-1],mid=0;
        while(l<=h){
            mid = (l+h)/2;
            int countLess = countless(mid,matrix);
            if(countLess<k){l=mid+1;}else{h=mid-1;}
        }
        return l;
    }
    public int countless(int target, int[][] matrix) {
        int n=matrix.length,l=n-1,h=0,count=0;
        while(l>=0 && h<n){
            if(matrix[l][h]>target){l--;}
            else{h++; count+=l+1;}
        }
        return count;
    }
}
