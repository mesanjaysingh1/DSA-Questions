Given the root of a binary tree and an integer targetSum, return true if the tree has a root-to-leaf path such that adding up all the values along the 
path equals targetSum.

A leaf is a node with no children.

Example 1:


Input: root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22
Output: true
Explanation: The root-to-leaf path with the target sum is shown.

Idea: do dfs and add value till leaf node (i.e both left & right are null) if sum== target return true otherwise remove curr node val from sum.

TC: O(n) SC: O(h)
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean hasPathSum(TreeNode root, int targetSum) {
        return dfs(root,targetSum,0);
    }
    public boolean dfs(TreeNode root, int targetSum,int currSum){
        if(root==null) return false;
        if(root.left==null && root.right==null) {
            currSum+=root.val;
            return currSum==targetSum;
        }
        currSum+=root.val;
        if(dfs(root.left,targetSum,currSum) || dfs(root.right,targetSum,currSum) ){
            return true;
        }
        currSum-=root.val;
        return false;
    }
}
