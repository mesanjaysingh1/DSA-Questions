Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.
Example 1:

Input: n = 3
Output: ["((()))","(()())","(())()","()(())","()()()"]
Example 2:

Input: n = 1
Output: ["()"]

Idea: add open ( to stk if open count < n & add close ) to stk if close count < open. Recursively do this and if openc=closec==n then 
iterator over stack and add to res[].


import java.util.*;
class Solution {
    public static void main(String args[]){
        Solution obj = new Solution();
        obj.generateParenthesis(3);
    }
    ArrayList<String> res = new ArrayList<>();
    Stack<String> stk = new Stack<>();
    public List<String> generateParenthesis(int n) {
        backtrack(0,0,n);
        return res;
    }
    public void backtrack(int open,int close,int n){
        if(open==n && close==n){
            String temp ="";
            Iterator val = stk.iterator();
            while(val.hasNext()){
                temp+=val.next();
            }
            res.add(temp); 
        }
        if(open<n){
            stk.push("(");
            backtrack(open+1,close,n);stk.pop();
        }
        if(close<open){
            stk.push(")");
            backtrack(open,close+1,n);stk.pop();
        }
        
    }
}
