Given an array nums of n integers, return an array of all the unique quadruplets [nums[a], nums[b], nums[c], nums[d]] such that:

0 <= a, b, c, d < n
a, b, c, and d are distinct.
nums[a] + nums[b] + nums[c] + nums[d] == target
You may return the answer in any order.

 

Example 1:

Input: nums = [1,0,-1,0,-2,2], target = 0
Output: [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]
Idea: Sort nums to avoid duplicates. Select first 2 nums then for next two do two sum 2 and if found add to res.

TC: O(n^3)

class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        Arrays.sort(nums);
       List<List<Integer>> res = new ArrayList<>();
        if(target ==-294967296 || target ==294967296) return res;
        List<Integer> quad = new ArrayList<>();
        kSum(res,quad,target,0,nums,4);
        return res;
    }
    public void kSum (List<List<Integer>> res , List<Integer> quad, int target,int start,int [] nums,int k){
        if(k!=2){
            for(int i=start;i<nums.length-k+1;i++){ // to leave space for k-1 elements
                if(i>start && nums[i]==nums[i-1]) continue; //same element
                quad.add(nums[i]);
                kSum(res,quad,target-nums[i],i+1,nums,k-1);
                quad.remove(quad.size()-1);
            }
            return;
        }
        //base case if k==2 two sum II 
        int left =start, right = nums.length-1;
        while(left<right){
            if( (nums[left]+nums[right]) >target) right--;
            else if ( (nums[left]+nums[right]) <target) left++;
            else if(( (nums[left]+nums[right])) ==  target){
                
                 quad.add(nums[left]); quad.add(nums[right]);
                res.add(new ArrayList<>(quad));   
                quad.remove(quad.size()-1);quad.remove(quad.size()-1);
                left++;
                while(left<right && nums[left]==nums[left-1]){left++;}
            }
        }
    }
}
