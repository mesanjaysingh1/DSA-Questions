Desc: https://leetcode.com/problems/range-sum-query-2d-immutable/description/

Idea: Cal rectangle sum from 0,0 till each pt using prefix sum of each row and above val of r,c which gives rectangle till that posn. To handle rectangle with 0,0 
starting pt we create new matrix with extra 1 row,col which is only 000... . When required to find area find rectangle area till  right most posn given subtract 
row above prefix sum & subtract left col sum from total. In this process left most r,c will be subtracted twice so add it again.

TC:O(n*n) for sum_matrix, theta(1) to get sum SC:O(n*n)

class NumMatrix {
    int sum_matrix[][];
    public NumMatrix(int[][] matrix) {
        sum_matrix = new int[matrix.length+1][matrix[0].length+1];// +1 to handle left pt 0,0
        for(int i=0;i<matrix.length;i++){
            int prefix_sum=0;
            for(int j=0;j<matrix[0].length;j++){
                prefix_sum += matrix[i][j];
                sum_matrix[i+1][j+1] =  prefix_sum + sum_matrix[i][j+1];
            }
        }
    }
    
    public int sumRegion(int row1, int col1, int row2, int col2) {
        int sum = sum_matrix[row2+1][col2+1] - sum_matrix[row1][col2+1] - 
                    sum_matrix[row2+1][col1] + sum_matrix[row1][col1]; 
                    // bottom right - above row - left col + top left
        return sum;
    }
}

/**
 * Your NumMatrix object will be instantiated and called as such:
 * NumMatrix obj = new NumMatrix(matrix);
 * int param_1 = obj.sumRegion(row1,col1,row2,col2);
 */
