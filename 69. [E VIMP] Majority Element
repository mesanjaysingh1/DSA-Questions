
Given an array nums of size n, return the majority element.

The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.

 

Example 1:

Input: nums = [3,2,3]
Output: 3
Brute Force: TC: O(n) SC:O(n)
class Solution {
    public int majorityElement(int[] nums) {
        HashMap<Integer,Integer> map = new HashMap<>();
        for(int n:nums){
            map.put(n,map.getOrDefault(n,0)+1);
            if(map.get(n)>(nums.length/2)) return n;
        }
        return 0;
    }
}

Using Boyer Moore's Majority Voting Algorithm
->
Optimal: TC:O(n) SC:O(1)
Idea: Inc count for element & if next element is diff dec count & if count==0 then take whichever next element as major.
class Solution {
    public int majorityElement(int[] nums) {
        int count=0,major=0;
        for(int n:nums){
            if(count==0){major=n;count++;}
            else if(n==major){count++;}
            else{count--;}
        }
        return major;
    }
}
