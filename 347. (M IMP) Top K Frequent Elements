Given an integer array nums and an integer k, return the k most frequent elements. You may return the answer in any order.

Example 1:

Input: nums = [1,1,1,2,2,3], k = 2
Output: [1,2]
Idea: Create a max heap based on frequency of element. poll top k elements.

TC: O(n) Sc: O(n)

class Solution {
    public int[] topKFrequent(int[] nums, int k) {
        HashMap<Integer,Integer> map = new HashMap<>();
        if(k==nums.length) return nums;
        for(int i=0;i<nums.length;i++){
            map.put(nums[i],map.getOrDefault(nums[i],0)+1);
        }
        PriorityQueue<Integer> maxh = 
            new PriorityQueue<>((a,b) ->map.get(b) - map.get(a));
        
        for(int i:map.keySet()){
            maxh.offer(i);
        }
        int res[]=new int[k];
        for(int i=0;i<k;i++){
            res[i] = maxh.poll();
        }
        return res;
        
    }
}
