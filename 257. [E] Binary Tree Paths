Given the root of a binary tree, return all root-to-leaf paths in any order.

A leaf is a node with no children.

Example 1:
Input: root = [1,2,3,null,5]
Output: ["1->2->5","1->3"]

Idea: If both left, right is null then it is leaf. Add to string var root.val till we find leaf node then add to arraylist.
If in between root==null then do backtracking by removing last char from string.

TC: O(n) n=nodes no. SC:O(n)

class Solution {
    public List<String> binaryTreePaths(TreeNode root) {
        ArrayList<String> res = new ArrayList<>();
        String list = "";
        backtrack(root,res,list);
        return res;
    }
    public void backtrack(TreeNode root,ArrayList<String> res,String list){
        String temp="";
        if(root==null){
            return;
        }
        if(root.left==null && root.right==null){
            if(list.length()!=0){list+="->";}
            list+= String.valueOf(root.val);
            res.add(list); return;
        }
        
        if(list.length()!=0){list+="->";}
        list+= String.valueOf(root.val);
        backtrack(root.left,res,list);
        backtrack(root.right,res,list);
        list = list.substring(0,list.length()-1);
        return;
    }
}
