Desc: https://leetcode.com/problems/pacific-atlantic-water-flow/

Idea: Using dfs Check from top row if they'd be included in ocean using height as parameter. similarly check for bottom row, leftmost & rightmost col .

class Solution {
    public List<List<Integer>> pacificAtlantic(int[][] heights) {
        List<List<Integer>> res = new ArrayList<>();
      int row = heights.length, col=heights[0].length;
      boolean [][]pacific = new boolean[row][col];  
      boolean [][]atlantic = new boolean[row][col];
      for(int i=0;i<col;i++){
          dfs(heights,0,i,pacific,Integer.MIN_VALUE);
          dfs(heights,row-1,i,atlantic,Integer.MIN_VALUE);
      }
     for(int i=0;i<row;i++){
          dfs(heights,i,0,pacific,Integer.MIN_VALUE);
          dfs(heights,i,col-1,atlantic,Integer.MIN_VALUE);
      }
        for(int i=0;i<row;i++){
            for(int j=0;j<col;j++){
                if(pacific[i][j]&&atlantic[i][j]) res.add(Arrays.asList(i,j));
            }
        }
        return res;
    }
    public void dfs(int [][]heights,int i,int j,boolean[][]node,int prev){
        if(i<0||j<0||i==heights.length||j==heights[0].length) return;
        if(heights[i][j]<prev||node[i][j])return;
        node[i][j]=true;
        dfs(heights,i+1,j,node,heights[i][j]);dfs(heights,i-1,j,node,heights[i][j]);
        dfs(heights,i,j+1,node,heights[i][j]);dfs(heights,i,j-1,node,heights[i][j]);
        
    }
}
