You are given an array of strings products and a string searchWord.

Design a system that suggests at most three product names from products after each character of searchWord is typed. 
Suggested products should have common prefix with searchWord. If there are more than three products with a common prefix return the three lexicographically 
minimums products.

Return a list of lists of the suggested products after each character of searchWord is typed.

Example 1:

Input: products = ["mobile","mouse","moneypot","monitor","mousepad"], searchWord = "mouse"
Output: [["mobile","moneypot","monitor"],["mobile","moneypot","monitor"],["mouse","mousepad"],["mouse","mousepad"],["mouse","mousepad"]]
Explanation: products sorted lexicographically = ["mobile","moneypot","monitor","mouse","mousepad"].
After typing m and mo all products match and we show user ["mobile","moneypot","monitor"].
After typing mou, mous and mouse the system suggests ["mouse","mousepad"].

Idea: Sort array thne have left & right ptr indicating matching range. Inc left ptr if not matching && dec right ptr if not matching. Add first 3 string from left
into res list of list every  time for each char typed.

This can also be solved with tries after sorting.

TC:O(nlogn + s*w*3) s=len of search word,w=total word length in product array. nlogn for sorting. SC:O(3*s*w) for each char we get 3 words

class Solution {
    public List<List<String>> suggestedProducts(String[] products, String searchWord) {
        Arrays.sort(products,String.CASE_INSENSITIVE_ORDER);
        List<List<String>> res = new ArrayList<>();
        int l=0,r=products.length-1;
        for(int i=0;i<searchWord.length();i++){
            char c = searchWord.charAt(i);
            while(l<=r && (products[l].length()<=i || products[l].charAt(i)!=c)){l++;}
            while(r>=l && (products[r].length()<=i || products[r].charAt(i)!=c)){r--;}
            int count=3,templ=l;
            ArrayList<String> temp = new ArrayList<>();
            while(count>0 && templ<=r){
                temp.add(products[templ++]); count--;
            }
            res.add(temp);
        }
        return res;
    }
}

