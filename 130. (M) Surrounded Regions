Given an m x n matrix board containing 'X' and 'O', capture all regions that are 4-directionally surrounded by 'X'.

A region is captured by flipping all 'O's into 'X's in that surrounded region.

Example 1:
Input: board = [["X","X","X","X"],["X","O","O","X"],["X","X","O","X"],["X","O","X","X"]]
Output: [["X","X","X","X"],["X","X","X","X"],["X","X","X","X"],["X","O","X","X"]]
Explanation: Notice that an 'O' should not be flipped if:
- It is on the border, or
- It is adjacent to an 'O' that should not be flipped.
The bottom 'O' is on the border, so it is not flipped.
The other three 'O' form a surrounded region, so they are flipped.

Idea: Use DFS Check from all 4 border anything connected to 'O' convert to * & at last convert all O rem to X as they were not connected to border O's & * to O.

class Solution {
    public void solve(char[][] board) {
        int row=board.length,col=board[0].length;
            for(int j=0;j<col;j++){
                if(board[0][j]=='O'){
                    dfs(board,0,j);
                }
                if(board[row-1][j]=='O'){
                    dfs(board,row-1,j);
                }
            }
            for(int j=0;j<row;j++){
                if(board[j][0]=='O'){
                    dfs(board,j,0);
                }
                if(board[j][col-1]=='O'){
                    dfs(board,j,col-1);
                }
            }
        for(int i=0;i<row;i++){
            for(int j=0;j<col;j++){
                if(board[i][j]=='O') board[i][j]='X';
                if(board[i][j]=='*') board[i][j]='O' ;
            }
        }
        
    }
    public void dfs(char[][]board,int i,int j){
        if(i<0||i==board.length||j<0||j==board[0].length||board[i][j]!='O' ) return ;
        
        board[i][j]='*';
        dfs(board,i+1,j);dfs(board,i-1,j);dfs(board,i,j+1);dfs(board,i,j-1);
           
    }
}
