Given an integer array nums and an integer k, return true if nums has a good subarray or false otherwise.

A good subarray is a subarray where:

its length is at least two, and
the sum of the elements of the subarray is a multiple of k.
Note that:

A subarray is a contiguous part of the array.
An integer x is a multiple of k if there exists an integer n such that x = n * k. 0 is always a multiple of k.
 
Example 1:

Input: nums = [23,2,4,6,7], k = 6
Output: true
Explanation: [2, 4] is a continuous subarray of size 2 whose elements sum up to 6.

Brute: TC O(n^2) using 2 loops

Optimal:

Idea: Calculate prefixsum and keep on adding in hashmap the remainder. If we find remainder already in map that means sum of some elements in array =0 also check if 
that elements count >=2 using index which is stored as value in map. Also add 0,-1 to solve condtn where prefixsum is divisible by k.

TC : O(n) SC:O(n)

class Solution {
    public boolean checkSubarraySum(int[] nums, int k) {
        HashMap<Integer,Integer> remainder = new HashMap<>(); //prefix rem, end index
        remainder.put(0,-1);// handle prefixsum  divisible edge case
        for(int i=0,total=0;i<nums.length;i++){
            total+=nums[i]; int r = total%k;
            if(!remainder.containsKey(r)) {
                remainder.put(r,i);
            }
            else if(i-remainder.get(r)>=2){return true;} // if contains and nums >=2
        }
        return false;
    }
}
