Given the head of a singly linked list where elements are sorted in ascending order, convert it to a height-balanced binary search tree.

Example 1:

Input: head = [-10,-3,0,5,9]
Output: [0,-3,9,-10,null,5]
Explanation: One possible answer is [0,-3,9,-10,null,5], which represents the shown height balanced BST.

Idea: Find middle as root & recur in left, right sub parts

TC:O(n) SC:O(n)

class Solution {
    public TreeNode sortedListToBST(ListNode head) {
        ArrayList<Integer> arr = new ArrayList<>();
        while(head!=null){arr.add(head.val); head=head.next;}
        return MakeBST(arr,0,arr.size()-1);
    }
    public TreeNode MakeBST(ArrayList<Integer> arr, int l, int r){
        if(r<l || l>r) return null;
        int mid =(l+r)/2;
        TreeNode root = new TreeNode (arr.get(mid));
        root.left = MakeBST(arr,l,mid-1);
        root.right = MakeBST(arr,mid+1,r);
        return root;
    }
}
