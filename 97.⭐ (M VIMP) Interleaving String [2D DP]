
Given strings s1, s2, and s3, find whether s3 is formed by an interleaving of s1 and s2.

An interleaving of two strings s and t is a configuration where s and t are divided into n and m non-empty substrings respectively, such that:

s = s1 + s2 + ... + sn
t = t1 + t2 + ... + tm
|n - m| <= 1
The interleaving is s1 + t1 + s2 + t2 + s3 + t3 + ... or t1 + s1 + t2 + s2 + t3 + s3 + ...
Note: a + b is the concatenation of strings a and b.

Example 1:

Input: s1 = "aabcc", s2 = "dbbca", s3 = "aadbbcbcac"
Output: true
Explanation: One way to obtain s3 is:
Split s1 into s1 = "aa" + "bc" + "c", and s2 into s2 = "dbbc" + "a".
Interleaving the two splits, we get "aa" + "dbbc" + "bc" + "a" + "c" = "aadbbcbcac".
Since s3 can be obtained by interleaving s1 and s2, we return true.

Idea: Create 2d matrix with extra col,row. Compute for each cell whether it matches with s3 char at i+j pos if yes make its cell true. 
this will be used next time for other cell.
Ex:
   a  b  c     s3 :abcbd
c|     
d|          T
 | F  F  F  T
 
 TC: O(nxm) sc:O(nxm)
 
 class Solution {
    public boolean isInterleave(String s1, String s2, String s3) {
        int n=s1.length(),m=s2.length();
        if(n+m != s3.length()) return false;
        boolean [][] dp = new boolean [n+1][m+1];
        dp[n][m]=true;
        for(int i=n;i>=0;i--){
            for(int j=m;j>=0;j--){
                if(i<n && s1.charAt(i)==s3.charAt(i+j) && dp[i+1][j]){
                    dp[i][j]=true;
                }
                if(j<m && s2.charAt(j)==s3.charAt(i+j) && dp[i][j+1]){
                    dp[i][j]=true;
                }
            }
        }
        return dp[0][0];
    }
}
