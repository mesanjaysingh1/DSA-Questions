The min-product of an array is equal to the minimum value in the array multiplied by the array's sum.

For example, the array [3,2,5] (minimum value is 2) has a min-product of 2 * (3+2+5) = 2 * 10 = 20.
Given an array of integers nums, return the maximum min-product of any non-empty subarray of nums. Since the answer may be large, return it modulo 109 + 7.

Note that the min-product should be maximized before performing the modulo operation. Testcases are generated such that the maximum min-product without modulo 
will fit in a 64-bit signed integer.

A subarray is a contiguous part of an array. 

Example 1:

Input: nums = [1,2,3,2]
Output: 14
Explanation: The maximum min-product is achieved with the subarray [2,3,2] (minimum value is 2).
2 * (2+3+2) = 2 * 7 = 14.
Example 2:

Input: nums = [2,3,3,1,2]
Output: 18
Explanation: The maximum min-product is achieved with the subarray [3,3] (minimum value is 3).
3 * (3+3) = 3 * 6 = 18.

Idea: Create monotonic inc stack so that we consider every numa s min while calculating min product subarray from that particular number. if num < peek of stack then
pop prev and calculate its product sum using prefix sum already computed. Push new element which was < prev peek onto stack with index of prev element, this is
done so as to get all combinations of subarrays.

This is a hard problem please look into code for more clear explaination.

TC:O(n) SC:(n)

class Solution {
    public int maxSumMinProduct(int[] nums) {
        int n =nums.length;long res=0;
        long [] prefixsum = new long[n+1]; prefixsum[0]=0;
        for(int i=1;i<=n;i++){
            prefixsum[i] = prefixsum[i-1] + nums[i-1];
        }
        ArrayDeque<int[]> stk = new ArrayDeque<>(); // mono inc stack
        for(int i=0;i<n;i++){
            int newStart = i;
            while(!stk.isEmpty() && stk.peek()[1] > nums[i] ){ //means curr num < peak
            int [] indval = stk.pop(); int ind = indval[0]; int val = indval[1];
                long total = prefixsum[i]-prefixsum[ind];
                res = Math.max(res,total*val);
                newStart = ind;
            }
            stk.push(new int [] {newStart,nums[i]});
        }
        while(!stk.isEmpty()){
            int [] indval = stk.pop(); int ind = indval[0], val = indval[1];
            long total = prefixsum[n]-prefixsum[ind];
            res = Math.max(res,total*val);
        }
        return (int)(res % 1000000007);
    }
}
