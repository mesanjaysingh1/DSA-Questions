Given an integer array nums that may contain duplicates, return all possible subsets (the power set).

The solution set must not contain duplicate subsets. Return the solution in any order.

Example 1:

Input: nums = [1,2,2]
Output: [[],[1],[1,2],[1,2,2],[2],[2,2]]

Idea : create decision to include repeated elements only once then dont include them in Decision tree.

class Solution {
    public List<List<Integer>> subsetsWithDup(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();
        // List<Integer> list = new ArrayList<>();
        Arrays.sort(nums);
        backtrack(res,new ArrayList<>(),0,nums);
        return res;
    }
    public void backtrack(List<List<Integer>> res, List<Integer> list, int start,int nums[])
    {
        res.add(new ArrayList<>(list));
        for(int i=start;i<nums.length;i++){
            if(i>start && nums[i]==nums[i-1]) continue;
            list.add(nums[i]);
            backtrack(res,list,i+1,nums);
            list.remove(list.size()-1);
        }
    }
}
