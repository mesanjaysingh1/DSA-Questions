Given an array intervals where intervals[i] = [li, ri] represent the interval [li, ri), remove all intervals that are covered by another interval in the list.

The interval [a, b) is covered by the interval [c, d) if and only if c <= a and b <= d.

Return the number of remaining intervals.

Example 1:

Input: intervals = [[1,4],[3,6],[2,8]]
Output: 2
Explanation: Interval [3,6] is covered by [2,8], therefore it is removed.

Idea: Sort array based of 1st index if = then bigger 2nd index will come first. Check if oth index <= oth of next array & 1st index >= 1st of next array, 
if yes then inc count and make next array element as prev to keep on checking for covered intervals.

TC:O(nlogn) SC:O(1)

class Solution {
    public int removeCoveredIntervals(int[][] intervals) {
      Arrays.sort(intervals,(int a[],int b[])->a[0]==b[0]?b[1]-a[1]:a[0]-b[0]);
      int count=0;
      for(int i=0;i<intervals.length-1;i++){
          if(intervals[i][0]<=intervals[i+1][0] && intervals[i][1]>=intervals[i+1][1]){
              intervals[i+1][0]=intervals[i][0];intervals[i+1][1]=intervals[i][1];
              count++;
          }
      } 
        return intervals.length-count;
    }
}
