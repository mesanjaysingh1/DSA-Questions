Given a non-empty array nums containing only positive integers, find if the array can be partitioned into two subsets
such that the sum of elements in both subsets is equal.

Example 1:

Input: nums = [1,5,11,5]
Output: true
Explanation: The array can be partitioned as [1, 5, 5] and [11].

-> Q is  Finding sum/2=target can it be formed from  given numbers

Idea: Create a dp (Set) of all the value from right side that can be made by adding/not adding a number. 
If adding a number makes it == target then true else at last false.

TC: O( n x sum(nums))   SC:O(sum(nums))

class Solution {
    public boolean canPartition(int[] nums) {
        int sum=0; for(int n:nums){sum+=n;} 
        if(sum%2==1) return false; int target = sum/2;
        
        HashSet <Integer> set = new HashSet<>(); set.add(0);
        for(int i=nums.length-1;i>=0;i--){
            HashSet<Integer> set2 = new HashSet<>(set);
            for(Integer n:set){
                if(nums[i]+n==target)return true;
                set2.add(nums[i]+n);
                set2.add(n);
            }
            set = set2;
        }
     return set.contains(target)?true:false;   
    }
}

