
You are given an array prices where prices[i] is the price of a given stock on the ith day.

Find the maximum profit you can achieve. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times) 
with the following restrictions:

After you sell your stock, you cannot buy stock on the next day (i.e., cooldown one day).
Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).

Example 1:

Input: prices = [1,2,3,0,2]
Output: 3
Explanation: transactions = [buy, sell, cooldown, buy, sell]

Idea: Use dp caching. At every point we can cooldown or buy/sell. So compute cooldown and buy/sell based on buying value i.e true-buy false -sell  &
take max of cooldown, buy/sell.

TC: O(2n) n-> no. of elements in array. SC:O(n) stack max size

class Solution {
    public int maxProfit(int[] prices) {
        HashMap<String,Integer> cache = new HashMap<>(); // key:index-buying/selling,value:price
        return dfs(cache,0,prices,true);   
    }
    
    public int dfs(HashMap<String,Integer> cache,int index,int[]prices, boolean buying){
        if(index>=prices.length)return 0;
        
        String key = index+"-"+buying;
        if(cache.containsKey(key)) return cache.get(key);
        
        int buyOsell=0;
        int cooldown = dfs(cache,index+1,prices,buying) ;
        if(buying){
            buyOsell = dfs(cache,index+1,prices,!buying) - prices[index];
        }
        else{
            buyOsell = dfs(cache,index+2,prices,!buying) + prices[index];
        }
        cache.put(key,Math.max(buyOsell,cooldown)); 
        return cache.get(key);
    }
}
