There is a robot on an m x n grid. The robot is initially located at the top-left corner (i.e., grid[0][0]). 
The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.

Given the two integers m and n, return the number of possible unique paths that the robot can take to reach the bottom-right corner.

The test cases are generated so that the answer will be less than or equal to 2 * 109.

Example 1:
Input: m = 3, n = 7
Output: 28

Idea: (2D DP) Compute ways from last cell. for each cell it num of way to reach goal is bottom+right no. of ways. for border its alwasys 1 .

TC: O(mxn) Sc:O(mxn)
class Solution {
    public int uniquePaths(int m, int n) {
        int [][] arr = new int[m][n];
        
        for(int i=m-1;i>=0;i--){
            for(int j=n-1;j>=0;j--){
                if(i==m-1){arr[i][j]=1;}
                else if(j==n-1){arr[i][j]=1;}
                else{arr[i][j]= arr[i+1][j]+arr[i][j+1];}
            }
        }
        return arr[0][0];
    }
}
