Given an array of intervals intervals where intervals[i] = [starti, endi], return the minimum number of intervals you need to remove to make the rest of the 
intervals non-overlapping. 

Example 1:

Input: intervals = [[1,2],[2,3],[3,4],[1,3]]
Output: 1
Explanation: [1,3] can be removed and the rest of the intervals are non-overlapping.

Idea: Check if overlaping if yes then make 1th index of next array min(arr[i][1],arr[i+1][1]) so that we have min 1th index val to compare with next coming arrays.

TC:O(nlogn) 

class Solution {
    public int eraseOverlapIntervals(int[][] intervals) {
        Arrays.sort(intervals,(int a[],int b[])-> a[0]-b[0]);
        int overlap_count=0;
        for(int i=0;i<intervals.length-1;i++){
            if(intervals[i][1]>intervals[i+1][0]){
                intervals[i+1][1]=Math.min(intervals[i][1],intervals[i+1][1]);
                overlap_count++;
            }
        }
        return (overlap_count);
    }
}
