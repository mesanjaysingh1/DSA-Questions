There are n dominoes in a line, and we place each domino vertically upright. In the beginning, we simultaneously push some of the dominoes either to the left 
or to the right.

After each second, each domino that is falling to the left pushes the adjacent domino on the left. Similarly, the dominoes falling to the right push their 
adjacent dominoes standing on the right.

When a vertical domino has dominoes falling on it from both sides, it stays still due to the balance of the forces.

For the purposes of this question, we will consider that a falling domino expends no additional force to a falling or already fallen domino.

You are given a string dominoes representing the initial state where:

dominoes[i] = 'L', if the ith domino has been pushed to the left,
dominoes[i] = 'R', if the ith domino has been pushed to the right, and
dominoes[i] = '.', if the ith domino has not been pushed.
Return a string representing the final state.

 

Example 1:

Input: dominoes = "RR.L"
Output: "RR.L"
Explanation: The first domino expends no additional force on the second domino.

Idea: Add all L & R into queue. Then pop and if L then check if it's left is . if yes then mark it L. If R after pop then check if right of it is . & if it is then
check it's right if it is L then pop once more to remove this L, if not mark right of it (i.e .) as R.

TC:O(n) SC:O(n)

class Solution {
    public String pushDominoes(String dominoes) {
        ArrayDeque<Pair<Integer,Character>> que = new ArrayDeque<>();
        char [] list = dominoes.toCharArray();
        for(int i=0;i<dominoes.length();i++){
            char c = dominoes.charAt(i); 
            list[i]=c;
            if(c != '.'){que.add(new Pair<>(i,c));}
        }
        while(!que.isEmpty()){
            var pairs = que.poll();
            int index = pairs.getKey(), ch = pairs.getValue();
            if(ch=='L' && index>0 && list[index-1]=='.'){
                que.add(new Pair<>(index-1,'L')); list[index-1]='L';
            }
            else if(ch=='R' && index+1<dominoes.length() && list[index+1]=='.'){
                if( (index+2 < dominoes.length() ) && (list[index+2]=='L') ){
                    que.poll(); 
                }
                else{
                  que.add(new Pair<>(index+1,'R')); list[index+1]='R';  
                }
            }
        }
       return String.valueOf(list);
    }
}
