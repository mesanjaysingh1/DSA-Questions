You are given the root of a binary search tree (BST), where the values of exactly two nodes of the tree were swapped by mistake. 
Recover the tree without changing its structure.

Example 1:

Input: root = [1,3,null,null,2]
Output: [3,1,null,null,2]
Explanation: 3 cannot be a left child of 1 because 3 > 1. Swapping 1 and 3 makes the BST valid.

IDea: Do inorder traversal on BSt which gives sorted nums. Store any ptr where prev > curr & curr ptr too store. 

TC:O(n) SC:O(n)

class Solution {
    TreeNode temp1 = null , temp2=null,prev=null;
    public void recoverTree(TreeNode root) {
        inorder(root);
        int temp = temp1.val; temp1.val=temp2.val; temp2.val=temp;
    }
    public void inorder(TreeNode root) {
        if(root==null) return ;
        inorder(root.left);
        if(prev!=null && prev.val>root.val){
            if(temp1==null){temp1=prev;}
            temp2=root;
        }
        prev=root;
        inorder(root.right);
    }
}
