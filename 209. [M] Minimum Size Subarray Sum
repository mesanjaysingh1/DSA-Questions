Given an array of positive integers nums and a positive integer target, return the minimal length of a 
subarray whose sum is greater than or equal to target. If there is no such subarray, return 0 instead.

Example 1:
Input: target = 7, nums = [2,3,1,2,4,3]
Output: 2
Explanation: The subarray [4,3] has the minimal length under the problem constraint.

Idea: create a window till sum<target then shift left & check. Keep updating res at the same time. This is sliding window technique.

TC:O(n) SC:O(1)

class Solution {
    public int minSubArrayLen(int target, int[] nums) {
        int l=0,r=0,res=Integer.MAX_VALUE,sum=0;
        while(r<nums.length){
            sum+=nums[r];
            while(sum>=target){
                res = Math.min(res,r-l+1);sum-=nums[l++];
            }
            r++;
        }
        return res==Integer.MAX_VALUE?0:res;
    }
}
