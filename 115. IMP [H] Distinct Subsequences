Given two strings s and t, return the number of distinct subsequences of s which equals t.

The test cases are generated so that the answer fits on a 32-bit signed integer.

Example 1:

Input: s = "rabbbit", t = "rabbit"
Output: 3
Explanation:
As shown below, there are 3 ways you can generate "rabbit" from s.
rabbbit
rabbbit
rabbbit

Idea: Check if s ptr == t ptr if yes then in one case move both and in other move only s ptr. If s ptr != t ptr then move both. if t ptr reaches end return 1. Store
result at i,j into dp to use it again. 

TC:O(s*t) SC:O(s*t)

class Solution {
    public int numDistinct(String s, String t) {
        if(s.length()<t.length()) return 0;
        Integer [][] dp = new Integer [s.length()][t.length()];
        return backtrack(s,t,dp,0,0);
    }
    public int backtrack(String s, String t, Integer[][]dp, int i,int j){
        if(j==t.length()) return 1;
        if(i==s.length() || (t.length()-j)>(s.length()-i)) return 0;
        if(dp[i][j]!=null) return dp[i][j];
        if( t.charAt(j) == s.charAt(i) ){
            dp[i][j] = backtrack(s,t,dp,i+1,j+1) + backtrack(s,t,dp,i+1,j);
        }
        else{
            dp[i][j] = backtrack(s,t,dp,i+1,j);
        }
        return dp[i][j];
    }
}
