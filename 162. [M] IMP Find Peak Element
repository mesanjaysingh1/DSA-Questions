A peak element is an element that is strictly greater than its neighbors.

Given a 0-indexed integer array nums, find a peak element, and return its index. If the array contains multiple peaks, return the index to any of the peaks.

You may imagine that nums[-1] = nums[n] = -∞. In other words, an element is always considered to be strictly greater than a neighbor that is outside the array.

You must write an algorithm that runs in O(log n) time. 

Example 1:

Input: nums = [1,2,3,1]
Output: 2
Explanation: 3 is a peak element and your function should return the index number 2.

Idea: Do binary search, check if mid > left, right then return mid else if mid <left then there is atleast one peak in left side so r=mid-1. Similarly if mid<right
then is atleast one peak in right side so l=mid+1. 

TC:O(logn) SC:O(1) 

class Solution {
    public int findPeakElement(int[] nums) {
        if(nums.length==1) return 0;
        int l=0,r=nums.length-1,n=nums.length-1, left=0,right=0;
        while(l<=r){
            int mid = (l+r)/2;
            if(mid-1<0){left=Integer.MIN_VALUE;} else {left=nums[mid-1];}
            if(mid+1>n){right=Integer.MIN_VALUE;} else {right=nums[mid+1];}
            if(nums[mid]>left && nums[mid]>right) {return mid;}
            else if(left>nums[mid]) {r=mid-1;}
            else{l=mid+1;}
        }
        return -1;
    }
}
