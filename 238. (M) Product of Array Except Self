Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].

The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.

You must write an algorithm that runs in O(n) time and without using the division operation.

Example 1:

Input: nums = [1,2,3,4]
Output: [24,12,8,6]

Idea: Compute prefix & then postfix in two iterations

class Solution {
    public int[] productExceptSelf(int[] nums) {
        int prefix=1,postfix=1,n=nums.length;
        int res[] = new int[n];
        for (int i=0;i<n;i++){
            if(i==0){
                res[i]=prefix;
            }
            else{
                res[i]=nums[i-1]*prefix;
                prefix=res[i];
            }
        }
        for(int i=n-1;i>=0;i--){
            if(i==n-1){
                postfix=nums[i];
            }
            else{
                res[i]=res[i]*postfix;
                postfix=postfix*nums[i];
            }
        }
        return res;
    }
}
