Desc: https://leetcode.com/problems/binary-search-tree-iterator/description/

Soln 1: 

Idea: Do In order traversal and add values to list. TC: O(1) for both operation. SC:O(n) n-> no. of elements

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

class BSTIterator {
    ArrayList<Integer> nodes; int index;

    public BSTIterator(TreeNode root) {
        nodes = new ArrayList<Integer>(); index=0;
        inorder(root);
    }
    public void inorder(TreeNode root){
        if(root==null) return;
        inorder(root.left);
        nodes.add(root.val);
        inorder(root.right);
    }
    
    public int next() {
        return nodes.get(index++);
    }
    
    public boolean hasNext() {
        return nodes.size()>=index+1;
    }
}

/**
 * Your BSTIterator object will be instantiated and called as such:
 * BSTIterator obj = new BSTIterator(root);
 * int param_1 = obj.next();
 * boolean param_2 = obj.hasNext();
 */
 
 Soln1 is better than soln2 
 -----------------
 Soln 2: Add left to stack, when giving next val add right and it's left childrens to stack.
 TC:O(n) for next O(1) for hasnext operation SC:O(n)
 
 /**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

class BSTIterator {
    ArrayDeque<TreeNode> stk;

    public BSTIterator(TreeNode root) {
        stk = new ArrayDeque<TreeNode> ();
        while(root!=null){stk.push(root);root=root.left;}
    }
    public int next() {
        TreeNode res = stk.pop();
        TreeNode curr=res.right;
        while(curr!=null){
            stk.push(curr); curr=curr.left;
        }
        return res.val;
    }
    
    public boolean hasNext() {
        return !stk.isEmpty();
    }
}

/**
 * Your BSTIterator object will be instantiated and called as such:
 * BSTIterator obj = new BSTIterator(root);
 * int param_1 = obj.next();
 * boolean param_2 = obj.hasNext();
 */
