You are given an array points representing integer coordinates of some points on a 2D-plane, where points[i] = [xi, yi].

The cost of connecting two points [xi, yi] and [xj, yj] is the manhattan distance between them: |xi - xj| + |yi - yj|, where |val|
denotes the absolute value of val.

Return the minimum cost to make all points connected. All points are connected if there is exactly one simple path between any two points.

Example 1:
Input: points = [[0,0],[2,2],[3,10],[5,2],[7,0]]
Output: 20
Explanation: 

We can connect the points as shown above to get the minimum cost of 20.
Notice that there is a unique path between every pair of points.
This is use of Prims Algo as we are forming a min spanning tree.
Idea: Compute [distance,node] from each node and add it to minheap. get min weight from minh and if its node is not visited already in hashset then add weight 
to cost else continue if already visited. after adding weight compute all distances from it to other pts and add it to minheap.

O(n^2 * logn) -> n [num of points, logn-> for poping from minheap]

class Solution {
    public int minCostConnectPoints(int[][] points) {
       PriorityQueue<int []> minh = new PriorityQueue<>((a,b)->a[0]-b[0]);//weight,next node
       HashSet<Integer> visited = new HashSet<>();
       minh.offer(new int[]{0,0});
        int cost=0;
        while(visited.size()<points.length){
            int node[] = minh.poll();
            int weight = node[0];int currnode=node[1];
            if(visited.contains(currnode)) continue;
            visited.add(currnode);
            cost+=weight;
            for(int i=0;i<points.length;i++) //checking distance with all points
            {
                int dist = Math.abs(points[currnode][0]-points[i][0])+
                            Math.abs(points[currnode][1]-points[i][1]);
                    minh.offer(new int []{dist,i});
            }
        }
        return cost;
    }
}
