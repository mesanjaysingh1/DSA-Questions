Given two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2, also represented as a string.

Note: You must not use any built-in BigInteger library or convert the inputs to integer directly.

Example 1:

Input: num1 = "2", num2 = "3"
Output: "6"

Idea: Reverse both string and multiply and store res in array as well as carry in +1 position. Then at last take from last of array to get correct result.

TC:O(m*n) SC:O(m+n)

class Solution {
    public String multiply(String num1, String num2) {
        if(num1.equals("0")||num2.equals("0")) return "0";
        int [] res = new int[num1.length()+num2.length()];
        String temp1="",temp2="";
        for(int i=num1.length()-1;i>=0;i--){temp1+=num1.charAt(i);}//reverse num1
        for(int i=num2.length()-1;i>=0;i--){temp2+=num2.charAt(i);}//reverse num2
        num1=temp1;num2=temp2;

        for(int i1=0;i1<num1.length();i1++){
            for(int i2=0;i2<num2.length();i2++){
                int digit = Integer.valueOf(String.valueOf(num1.charAt(i1)))
                *Integer.valueOf(String.valueOf(num2.charAt(i2)));
                res[i1+i2] += digit;
                res[i1+i2+1] += (res[i1+i2]/10);
                res[i1+i2] = res[i1+i2] %10;
            }
        }
        String mul =""; int n = num1.length()+num2.length()-1;
        for(int i=n;i>=0;i--){mul+= String.valueOf(res[i]);} // reverse array vals
        
        int beg =0; while(mul.charAt(beg)=='0'){beg++;}
        mul = mul.substring(beg,mul.length());
        return mul;
    }
}
