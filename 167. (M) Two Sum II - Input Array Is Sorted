Given a 1-indexed array of integers numbers that is already sorted in non-decreasing order, find two numbers such that they add up to a specific target number. Let these two numbers be numbers[index1] and numbers[index2] where 1 <= index1 < index2 <= numbers.length.

Return the indices of the two numbers, index1 and index2, added by one as an integer array [index1, index2] of length 2.

The tests are generated such that there is exactly one solution. You may not use the same element twice.

Your solution must use only constant extra space.

Example 1:

Input: numbers = [2,7,11,15], target = 9
Output: [1,2]
Explanation: The sum of 2 and 7 is 9. Therefore, index1 = 1, index2 = 2. We return [1, 2].

Idea: Create 2 pointers left,right if sums of it == target return index, if >target right-- else left++

class Solution {
    public int[] twoSum(int[] numbers, int target) {
        int n=numbers.length;int res[]=new int[2];
        int start=0,end=n-1;
        while(start<end){
            if(numbers[start]+numbers[end]==target){break;}
            if(numbers[start]+numbers[end]>target){end--;}
            else {start++;}
        }
        res[0]=start+1;res[1]=end+1;
        return res;
    }
}
