Given the root of a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.

Example 1:
Input: root = [1,2,3,null,5,null,4]
Output: [1,3,4]

Idea : do level order traversal [right to left] and for first remove operatn add it to res.

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> rightSideView(TreeNode root) {
      List<Integer> arr  = new ArrayList<>();
      if(root==null)return arr;  
      ArrayDeque <TreeNode> que = new ArrayDeque<>();
      que.add(root);
      while(!que.isEmpty()){
          int len =que.size();
          for(int i=0;i<len;i++){
              TreeNode curr = que.remove();
              if(i==0)arr.add(curr.val);
              if(curr.right!=null){que.add(curr.right);}
              if(curr.left!=null){que.add(curr.left);}
          }
      }  
        return arr;
    }
}
