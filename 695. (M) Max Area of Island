You are given an m x n binary matrix grid. An island is a group of 1's (representing land) connected 4-directionally (horizontal or vertical.) 
You may assume all four edges of the grid are surrounded by water.

The area of an island is the number of cells with a value 1 in the island.

Return the maximum area of an island in grid. If there is no island, return 0.

Example 1:


Input: grid = [[0,0,1,0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,1,1,0,1,0,0,0,0,0,0,0,0],[0,1,0,0,1,1,0,0,1,0,1,0,0],[0,1,0,0,1,1,0,0,1,1,1,0,0],
[0,0,0,0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,0,0,0,0,0,0,1,1,0,0,0,0]]
Output: 6

Idea: Same as No. of islands problem. using dfs find every neighbor 1's and make it 0 & inc count recursively. Return max of count as ans.
O(M x N)

class Solution {
    public int maxAreaOfIsland(int[][] grid) {
        int res=0;
       for(int i=0;i<grid.length;i++){
           for(int j=0;j<grid[0].length;j++){
               int count=0;
               if(grid[i][j]==1){
                   res = Math.max(res,dfs(grid,i,j,0));
               }
           }
       }
        return res;
    }
    public int dfs(int[][]grid,int i,int j, int count){
        if(i<0||j<0||i==grid.length||j==grid[0].length||grid[i][j]==0) return count;
        grid[i][j]=0;
        return 1+dfs(grid,i+1,j,count)+dfs(grid,i-1,j,count)+dfs(grid,i,j+1,count)+
            dfs(grid,i,j-1,count);
    }
}
