Given the root of a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level).

Idea : Push root in queue and till queue is not empty remove element and add it to res arr. at the same time add left,right of root to queue

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
    ArrayDeque<TreeNode> que = new ArrayDeque<>();
    List<List<Integer>> arr = new ArrayList<> ();
    if(root==null) return arr;
    que.add(root);
    while(!que.isEmpty()){
        int len = que.size();
        List<Integer> temp = new ArrayList<>();
        for(int i=0;i<len;i++){
           TreeNode curr = que.remove();
           temp.add(curr.val); 
        if(curr.left!=null){que.add(curr.left);}
        if(curr.right!=null){que.add(curr.right);}
        }
       arr.add(temp); 
    }    
    return arr;
    }
}
