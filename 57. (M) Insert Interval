You are given an array of non-overlapping intervals intervals where intervals[i] = [starti, endi] 
represent the start and the end of the ith interval and intervals is sorted in ascending order by starti. You are also given an interval 
newInterval = [start, end] that represents the start and end of another interval.

Insert newInterval into intervals such that intervals is still sorted in ascending order by starti and intervals still does not have any overlapping 
intervals (merge overlapping intervals if necessary).

Return intervals after the insertion.

Example 1:

Input: intervals = [[1,3],[6,9]], newInterval = [2,5]
Output: [[1,5],[6,9]]
Idea: if 1st point's last is before new interval, add 1st point to res. else if new interval last pt is before 1st pt start then add new interval, 
1st point and others. if its overlapping then find min & max of both points.

Tc : O(N) SC:O(n)
n-> no. of intervals given

class Solution {
    public int[][] insert(int[][] intervals, int[] newInterval) {
        List<int[]> list = new ArrayList<>();
        for(int []interval: intervals){
            if(newInterval==null || interval[1]<newInterval[0]){
                list.add(interval);
            }
            else if(interval[0]>newInterval[1]){
                list.add(newInterval);list.add(interval);newInterval=null;
            }
            else{
                newInterval[0]= Math.min(interval[0],newInterval[0]);
                newInterval[1]= Math.max(interval[1],newInterval[1]);
            }
        }
        if(newInterval!=null) list.add(newInterval);
        return list.toArray(new int[list.size()][]);
    }
}
