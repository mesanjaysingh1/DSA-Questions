Given the head of a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.

You should preserve the original relative order of the nodes in each of the two partitions.

Example 1:

Input: head = [1,4,3,2,5,2], x = 3
Output: [1,2,2,4,3,5]
Idea: Creat two separate LL for < left & >= right.

TC:O(n) sC:O(1)
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode partition(ListNode head, int x) {
        ListNode left = new ListNode();ListNode right = new ListNode();
        ListNode lefttail=left,righttail=right;
        while(head!=null){
            if(head.val<x){
                lefttail.next=head;lefttail=head;
            }
            else{righttail.next=head;righttail=head;}
            head=head.next;
        }
        lefttail.next=right.next; righttail.next=null;
        return left.next;
    }
}
