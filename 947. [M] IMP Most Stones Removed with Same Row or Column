On a 2D plane, we place n stones at some integer coordinate points. Each coordinate point may have at most one stone.
A stone can be removed if it shares either the same row or the same column as another stone that has not been removed.
Given an array stones of length n where stones[i] = [xi, yi] represents the location of the ith stone, return the largest possible number of stones that can be removed.
Example 1:

Input: stones = [[0,0],[0,1],[1,0],[1,2],[2,1],[2,2]]
Output: 5
Explanation: One way to remove 5 stones is as follows:
1. Remove stone [2,2] because it shares the same row as [2,1].
2. Remove stone [2,1] because it shares the same column as [0,1].
3. Remove stone [1,2] because it shares the same row as [1,0].
4. Remove stone [1,0] because it shares the same column as [0,0].
5. Remove stone [0,1] because it shares the same row as [0,0].
Stone [0,0] cannot be removed since it does not share a row/column with another stone still on the plane.

Idea: Do dfs on all stones in same row and col & add it to visited & they can be counted as one as others can be removed. Repeated this & return count.

TC: O(n) SC:O(n)

class Solution {
    public int removeStones(int[][] stones) {
        int component=0,n=stones.length;
        int [] visited = new int[n];
        for(int i=0;i<n;i++){
            if(visited[i]!=1){
                component++; dfs(i,stones,visited);
            }
        }
        return n-component;
    }
    public void dfs(int index,int[][]stones,int[]visited){
        if(visited[index]==1) return;
        visited[index]=1;
        for(int i=0;i<stones.length;i++){
            if(visited[i]!=1 && same_row_col(stones,index,i)){
                dfs(i,stones,visited);
            }
        }
    }
    public boolean same_row_col(int[][]stones,int index,int i){
        if(stones[index][0]==stones[i][0] || stones[index][1]==stones[i][1])
        {return true;}
        return false;
    }
}
