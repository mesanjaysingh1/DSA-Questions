Design an algorithm that collects daily price quotes for some stock and returns the span of that stock's price for the current day.

The span of the stock's price today is defined as the maximum number of consecutive days (starting from today and going backward) for which 
the stock price was less than or equal to today's price.

For example, if the price of a stock over the next 7 days were [100,80,60,70,60,75,85], then the stock spans would be [1,1,1,2,1,4,6].
Implement the StockSpanner class:

StockSpanner() Initializes the object of the class.
int next(int price) Returns the span of the stock's price given that today's price is price.
 

Example 1:

Input
["StockSpanner", "next", "next", "next", "next", "next", "next", "next"]
[[], [100], [80], [60], [70], [60], [75], [85]]
Output
[null, 1, 1, 1, 2, 1, 4, 6]

Explanation
StockSpanner stockSpanner = new StockSpanner();
stockSpanner.next(100); // return 1
stockSpanner.next(80);  // return 1
stockSpanner.next(60);  // return 1
stockSpanner.next(70);  // return 2
stockSpanner.next(60);  // return 1
stockSpanner.next(75);  // return 4, because the last 4 prices (including today's price of 75) were less than or equal to today's price.
stockSpanner.next(85);  // return 6

Idea: Either next num is >= or < then top of stack. If >= then add prev span +1 to curr and remove prev by pop. if curr < peek then no change would be required.

As each element is added once and removed once so 
TC :O(n) SC:O(n)

class StockSpanner {
    ArrayDeque<int[]> stk; // array will store price,span
    public StockSpanner() {
       stk = new ArrayDeque<>();
    }
    
    public int next(int price) {
        int span =1;
        while(!stk.isEmpty() && price>=stk.peek()[0]){
            span+= stk.pop()[1]; //adding prev smaller or = element span to curr
        }
        stk.push(new int[] {price,span});
        return span;
    }
}

/**
 * Your StockSpanner object will be instantiated and called as such:
 * StockSpanner obj = new StockSpanner();
 * int param_1 = obj.next(price);
 */
