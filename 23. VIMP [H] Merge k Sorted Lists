You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.

Merge all the linked-lists into one sorted linked-list and return it.

Example 1:

Input: lists = [[1,4,5],[1,3,4],[2,6]]
Output: [1,1,2,3,4,4,5,6]
Explanation: The linked-lists are:
[
  1->4->5,
  1->3->4,
  2->6
]
merging them into one sorted list:
1->1->2->3->4->4->5->6

Idea: Using merge sort concept Merge 2,2,.. lists at a time.

TC:O(nlogk) SC:O(1)

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        int base=1;
        while(base<lists.length){
            for(int i=0;i<lists.length-base;i+=2*base){;
                lists[i] = mergelist(lists[i],lists[i+base]);
            }
            base*=2;
        }
        return lists.length==0?null:lists[0];
    }
    public ListNode mergelist(ListNode l1,ListNode l2){
        ListNode dummy = new ListNode(0);ListNode tail = dummy;
        while(l1!=null && l2!=null){
            if(l1.val<=l2.val){
                tail.next=l1; l1=l1.next;
            }
            else{
                tail.next=l2; l2=l2.next;
            }
            tail=tail.next;
        }
        if(l1!=null){
                tail.next=l1; 
        }
        else{
                tail.next=l2;
        }
        return dummy.next;
    }
}
