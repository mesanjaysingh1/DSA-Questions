In a linked list of size n, where n is even, the ith node (0-indexed) of the linked list is known as the twin of the (n-1-i)th node, if 0 <= i <= (n / 2) - 1.

For example, if n = 4, then node 0 is the twin of node 3, and node 1 is the twin of node 2. These are the only nodes with twins for n = 4.
The twin sum is defined as the sum of a node and its twin.

Given the head of a linked list with even length, return the maximum twin sum of the linked list.

Example 1:

Input: head = [5,4,2,1]
Output: 6
Explanation:
Nodes 0 and 1 are the twins of nodes 3 and 2, respectively. All have twin sum = 6.
There are no other nodes with twins in the linked list.
Thus, the maximum twin sum of the linked list is 6. 

Brute: TC:O(n) SC:O(n)

class Solution {
    public int pairSum(ListNode head) {
        ArrayList<Integer> arr = new ArrayList<>(); ListNode curr = head;
        while(curr!=null){arr.add(curr.val); curr=curr.next;}
        int l=0,r=arr.size()-1,res=0;
        while(l<=r){
            res=Math.max(res,arr.get(l)+arr.get(r));
            l++;r--;
        }
        return res;
    }
}

Optimal: Using slow,fast ptr find mid. Then reverse other half and add to first half.
TC:O(n/2 i.e n) SC:O(1)

class Solution {
    public int pairSum(ListNode head) {
        ListNode slow=head,fast=head;
        while(fast!=null){fast=fast.next.next;slow=slow.next;}
        int res=0;ListNode curr2=slow, prev=null, curr=head;
        while(curr2!=null){ // reverse other half
            ListNode temp = curr2.next; curr2.next=prev; prev = curr2; curr2=temp;
        } curr2=prev;
        while(curr!=slow && curr2!=null){
            res=Math.max(res,curr.val+curr2.val); curr=curr.next; curr2=curr2.next;
        }
        return res;
    }
}
