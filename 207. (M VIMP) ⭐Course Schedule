There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. 
You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai.

For example, the pair [0, 1], indicates that to take course 0 you have to first take course 1.
Return true if you can finish all courses. Otherwise, return false.

Example 1:

Input: numCourses = 2, prerequisites = [[1,0]]
Output: true
Explanation: There are a total of 2 courses to take. 
To take course 1 you should have finished course 0. So it is possible.

Idea: Creat adj list for each node with prererqusites as list. Do DFS for each unvisited node & check if its nodes have cycle & 
keep track of visited node in visit array. At last mark it as 1 so that we don't recur for it again as it doesn't have cycle.

class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
       List<List<Integer>> Adj_List = new ArrayList<>();
        for(int i=0;i<numCourses;i++){
           Adj_List.add(new ArrayList<Integer>());
       } 
       for(int i=0;i<prerequisites.length;i++){
           Adj_List.get(prerequisites[i][0]).add(prerequisites[i][1]);
       } 
        int visited[] = new int[numCourses];
        for(int i=0;i<numCourses;i++){
           if(visited[i]!=1){
               if(isCyclic(Adj_List,visited,i)) return false;
           }
       }
        return true;   
    }
    public boolean isCyclic(List<List<Integer>> adj,int[]visited,int curr ){
        if(visited[curr]==2) return true;
        visited[curr]=2;
        for(int i=0;i<adj.get(curr).size();i++){
            if(visited[adj.get(curr).get(i)]!=1){
                if(isCyclic(adj,visited,adj.get(curr).get(i))){return true;}
            }
        }
        visited[curr]=1;
        return false;
    }
}
