Given an integer array nums of unique elements, return all possible subsets (the power set).

The solution set must not contain duplicate subsets. Return the solution in any order.

Example 1:

Input: nums = [1,2,3]
Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]

Idea: At  each level decide whether to include current no. or not. I.E Backtraking.

class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();
        ArrayList <Integer> list = new ArrayList<>();
        dfs(res,list,nums,0);
        return res;
    }
    public void dfs(List<List<Integer>>res,ArrayList<Integer> list,int[] nums,int start){
        if (start==nums.length) res.add(new ArrayList(list));
        else{
            list.add(nums[start]);
            dfs(res,list,nums,start+1);
            list.remove(list.size()-1);
            dfs(res,list,nums,start+1);
        }
    }
}
