A string s is called happy if it satisfies the following conditions:

s only contains the letters 'a', 'b', and 'c'.
s does not contain any of "aaa", "bbb", or "ccc" as a substring.
s contains at most a occurrences of the letter 'a'.
s contains at most b occurrences of the letter 'b'.
s contains at most c occurrences of the letter 'c'.
Given three integers a, b, and c, return the longest possible happy string. If there are multiple longest happy strings, return any of them. If there is no 
such string, return the empty string "".

A substring is a contiguous sequence of characters within a string.

Example 1:

Input: a = 1, b = 1, c = 7
Output: "ccaccbcc"
Explanation: "ccbccacc" would also be a correct answer.

Idea: Get max freq char from maxheap. If last two char matches with it then get 2nd most freq char and add it to res inorder to avoid aaa/bbb/ccc condition. If last
2 are not same as curr poped then add to res directly.

TC : O(n) n->total of a,b,c count. SC:O(3)
class Solution {
    public String longestDiverseString(int a, int b, int c) {
       HashMap<Character,Integer> map = new HashMap<>();//map-> char,count
       PriorityQueue<Character> maxh = new PriorityQueue<>((i,j)-> map.get(j)-map.get(i));
       if(a>0){map.put('a',a);}if(b>0){map.put('b',b);}if(c>0){map.put('c',c);}
       
       maxh.addAll(map.keySet());
       String res="";
       while(!maxh.isEmpty()){
           char ch = maxh.poll(); int count=map.get(ch);
           if(res.length()>1 && res.charAt(res.length()-1)==ch && 
             res.charAt(res.length()-2) == ch){
               if(maxh.isEmpty()){break;}// no 2nd greatest freqn char in maxh available.
               char c2 = maxh.poll(); int count2 = map.get(c2)-1;
              res+=c2;if(count2!=0){map.put(c2,count2);maxh.offer(c2);}
           }
           else{
               res+=ch;count-=1;
           }
           if(count!=0){map.put(ch,count);maxh.offer(ch);}
       }
       
        return res;
    }
}
