Given a root node reference of a BST and a key, delete the node with the given key in the BST. Return the root node reference (possibly updated) of the BST.

Basically, the deletion can be divided into two stages:

Search for a node to remove.
If the node is found, delete the node.
 
Example 1:

Input: root = [5,3,6,2,4,null,7], key = 3
Output: [5,4,6,2,null,null,7]
Explanation: Given key to delete is 3. So we find the node with value 3 and delete it.
One valid answer is [5,4,6,2,null,null,7], shown in the above BST.
Please notice that another valid answer is [5,2,6,null,4,null,7] and it's also accepted.

Idea: Find the node to delete then take its left node if exist and add to its extreme right roots.right.

TC:O(n) n=nodes SC:O(n)

class Solution {
    public TreeNode deleteNode(TreeNode root, int key) {
        if(root==null) return null;
        if(root.val>key) root.left= deleteNode(root.left,key);
        else if(root.val<key) root.right = deleteNode(root.right,key);
        else{return delete(root);}
        return root;
    }
    public TreeNode delete(TreeNode root){
        if(root.right==null)return root.left;
        if(root.left==null) return root.right;
        TreeNode curr=root.left;
        while(curr.right!=null){curr=curr.right;}
        curr.right=root.right;
        return root.left;

    }
}
