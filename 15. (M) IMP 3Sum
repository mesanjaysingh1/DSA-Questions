Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets.

Example 1:

Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Explanation: 
nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.
nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.
nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.
The distinct triplets are [-1,0,1] and [-1,-1,2].
Notice that the order of the output and the order of the triplets does not matter.

Idea: Sort the array then make fix first element & do 2sum with 2 pointers for remaining elements of array. then do this for rem elements too.

class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();
        Arrays.sort(nums);
        for(int i=0;i<nums.length-2;i++){
                if(i==0 || (nums[i]!=nums[i-1] && i>0)){
                int start=i+1,end=nums.length-1,target=0-nums[i];
//2sum II        while(start<end){
                if(nums[start]+nums[end]==target){
                    List<Integer> temp = new ArrayList<>();
                    temp.add(nums[i]);temp.add(nums[start]);temp.add(nums[end]);
                    res.add(temp);
                while(start<end && nums[start]==nums[start+1])  {start++;}  
                while(start<end &&  nums[end]==nums[end-1])  {end--;} 
                start++;end--;    
                }
                else if(nums[start]+nums[end]>target){
                    end--;
                }
                else{
                    start++;
                }   
            }
                }
        }
        return res;
    }
}
