Design a system that manages the reservation state of n seats that are numbered from 1 to n.

Implement the SeatManager class:

SeatManager(int n) Initializes a SeatManager object that will manage n seats numbered from 1 to n. All seats are initially available.
int reserve() Fetches the smallest-numbered unreserved seat, reserves it, and returns its number.
void unreserve(int seatNumber) Unreserves the seat with the given seatNumber.
 
Idea: Add reserved seat no to Set & unreserved to Min heap as we need smallest unreserved seat no.

TC: Based on operations SC:O(n) n->total seat no.s

class SeatManager {
    HashSet<Integer> reserved; //seatno reserved
    PriorityQueue<Integer> unreserved; 
    public SeatManager(int n) {
        unreserved = new PriorityQueue<>();
        reserved = new HashSet<>();
        for(int i=1;i<=n;i++){
            unreserved.offer(i);
        }
    }
    
    public int reserve() {
        int reserve_no = unreserved.poll();
        reserved.add(reserve_no);
        return reserve_no;
    }
    
    public void unreserve(int seatNumber) {
        reserved.remove(seatNumber);
        unreserved.add(seatNumber);
    }
}

/**
 * Your SeatManager object will be instantiated and called as such:
 * SeatManager obj = new SeatManager(n);
 * int param_1 = obj.reserve();
 * obj.unreserve(seatNumber);
 */
