
Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.

A subarray is a contiguous part of an array.

Example 1:

Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.

Brute: two loops & inc window size by 1 for each element O(n^2)

Idea: Add to res if nums doesn't make it <0 else make currSum=0.

TC: O(n)
class Solution {
    public int maxSubArray(int[] nums) {
        int maxSum = nums[0];
        int currSum=0;
        for(int n:nums){
            currSum+=n;
            maxSum=Math.max(maxSum,currSum);
            if(currSum<0)currSum=0;
        }
        return maxSum;
    }
}
