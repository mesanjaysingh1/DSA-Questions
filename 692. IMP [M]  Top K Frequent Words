Given an array of strings words and an integer k, return the k most frequent strings.

Return the answer sorted by the frequency from highest to lowest. Sort the words with the same frequency by their lexicographical order.
Example 1:

Input: words = ["i","love","leetcode","i","love","coding"], k = 2
Output: ["i","love"]
Explanation: "i" and "love" are the two most frequent words.
Note that "i" comes before "love" due to a lower alphabetical order.

Idea: ADd k elements to minh based on freq and if freq same then lexi compare. If > k elements in minh then poll()

TC:O(nlogk) SC:O(n)

class Solution {
    public List<String> topKFrequent(String[] words, int k) {
        HashMap<String,Integer> map = new HashMap<>();
        for(String s:words){
            map.put(s,map.getOrDefault(s,0)+1);
        }
        PriorityQueue<String> minh = new PriorityQueue<>(
            (a,b)-> {
                return map.get(a)==map.get(b)? b.compareTo(a):
                     map.get(a)-map.get(b);
            });
        
        for(Map.Entry<String,Integer> s:map.entrySet()){
            minh.offer(s.getKey());
            if(minh.size()>k){minh.poll();}
        }
        String[] res = new String[k];
        for(int i=k-1;i>=0;i--){
            res[i] = minh.poll();
        }
        return Arrays.asList(res);
    }
}
