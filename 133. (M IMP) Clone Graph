Desc: https://leetcode.com/problems/clone-graph/

Idea: create a  hashmap of <int,node> so that visited node.val doesn't get recur multiple times. create node with val as passed param & its neighbors by recursion.

/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> neighbors;
    public Node() {
        val = 0;
        neighbors = new ArrayList<Node>();
    }
    public Node(int _val) {
        val = _val;
        neighbors = new ArrayList<Node>();
    }
    public Node(int _val, ArrayList<Node> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
}
*/

class Solution {
    public Node cloneGraph(Node node) {
        return clone(node);
    }
    HashMap<Integer,Node> map = new HashMap<>();
    public Node clone(Node node){
        if(node==null)return null;
        if(map.containsKey(node.val)) return map.get(node.val);
        Node newnode = new Node(node.val,new ArrayList<Node>());
        map.put(node.val,newnode);
        for(Node neighbor : node.neighbors){
            newnode.neighbors.add(clone(neighbor));
        }
        return newnode;
    }
}
