Given an integer n, return the least number of perfect square numbers that sum to n.

A perfect square is an integer that is the square of an integer; in other words, it is the product of some integer with itself. 
For example, 1, 4, 9, and 16 are perfect squares while 3 and 11 are not.
 
Example 1:

Input: n = 12
Output: 3
Explanation: 12 = 4 + 4 + 4.

Idea : Using bottom up dp approach first solve for smaller nums like 1,2.. then build way towards target. Build dp using 1 to all values <=square root of target. 
Take min for dp value.

TC:O( n sqrt(n)) SC:O(n) 

class Solution {
    public int numSquares(int n) {
        int dp [] = new int[n+1];
        Arrays.fill(dp,n); dp[0]=0;
        for(int target=1;target<n+1;target++){
            for(int s=1;s<=Math.sqrt(target);s++){
                int square = s* s; 
                dp[target] = Math.min(dp[target],1+dp[target-square]);
            }
        }
        return dp[n];
    }
}
