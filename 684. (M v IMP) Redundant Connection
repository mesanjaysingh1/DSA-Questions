In this problem, a tree is an undirected graph that is connected and has no cycles.

You are given a graph that started as a tree with n nodes labeled from 1 to n, with one additional edge added. 
The added edge has two different vertices chosen from 1 to n, and was not an edge that already existed. 
The graph is represented as an array edges of length n where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the graph.

Return an edge that can be removed so that the resulting graph is a tree of n nodes. If there are multiple answers, return the answer that occurs last in the input.

Example 1:

Input: edges = [[1,2],[1,3],[2,3]]
Output: [2,3]
Idea: Make two function find:to find its parent if same return val else decrease val & recur as it is in increasing order, Union: to make 2nd param parent 
as parent of 1 param.

class Solution {
    int [] parent;
    public int[] findRedundantConnection(int[][] edges) {
        parent = new int[edges.length];
        for(int i=0;i<edges.length;i++){parent[i]=i+1;}
        for(int []edge:edges){
            if(find(edge[0])==find(edge[1])) return edge;
            union(edge[0],edge[1]);
        }
        return new int[0];
    }
    public int find(int x){
        if(x==parent[x-1]) return x;
        return find(parent[x-1]);
    }
    public void union(int x,int y){
         parent[find(y)-1] = find(x);
    }
}
