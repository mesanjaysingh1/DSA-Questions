Given an array of integers temperatures represents the daily temperatures, return an array answer such that answer[i] is the number of days you have to wait after the ith day to get a warmer temperature. If there is no future day for which this is possible, keep answer[i] == 0 instead.

Example 1:

Input: temperatures = [73,74,75,71,69,72,76,73]
Output: [1,1,4,2,1,1,0,0]

Brute: O(N^2)
class Solution {
    public int[] dailyTemperatures(int[] temperatures) {
        int n=temperatures.length;int res[]=new int[n];
        for(int i=0;i<n;i++){
            int count=0;
            for(int j=i+1;j<n;j++){
                if(temperatures[i]>=temperatures[j]){
                    count++;
                }
                else{
                    count++;
                    res[i]=count;break;
                }
            }
        }
        return res;
    }
}

Optimal:
idea: check current temperature with top of stack if < push index else > then res[stk.peek()]=i.stk.peek() do this till peek<temp[i]

O(N)
class Solution {
    public int[] dailyTemperatures(int[] temperatures) {
        int n=temperatures.length;int res[]=new int[n];
        Stack <Integer> stk =new Stack<>();
        for(int i=0;i<n;i++){
           while(!stk.isEmpty() && temperatures[stk.peek()]<temperatures[i]){
               res[stk.peek()]=i-stk.pop();
           } 
           stk.push(i); 
        }
        return res;
    }
}
