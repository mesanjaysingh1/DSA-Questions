You are given a perfect binary tree where all leaves are on the same level, and every parent has two children. The binary tree has the following definition:

struct Node {
  int val;
  Node *left;
  Node *right;
  Node *next;
}
Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL.

Initially, all next pointers are set to NULL.

Example 1:

Input: root = [1,2,3,4,5,6,7]
Output: [1,#,2,3,#,4,5,6,7,#]
Explanation: Given the above perfect binary tree (Figure A), your function should populate each next pointer to point to its next right node, 
just like in Figure B. The serialized output is in level order as connected by the next pointers, with '#' signifying the end of each level.

Brute: Using BFS TC:O(n) SC:O(n)

class Solution {
    public Node connect(Node root) {
        ArrayDeque<Node> que = new ArrayDeque<>();
        que.offer(root);
        while(!que.isEmpty()){
            int size = que.size(); 
            Node curr = que.poll(); Node right_ = null;
            while(size>0){
            if(curr.right!=null)que.offer(curr.right);
            if(curr.left!=null)que.offer(curr.left);
            curr.next = right_; right_=curr;  size--;
            }
        }
        return root;
    }
}

Optimal: We use bfs only but without queue as we have access to right tree which we have already connected using next ptr.
Using same thinking connecting left with right and its right with right's left by using next connection between the 2 nodes.
We maintain nxt ptr to get child ptr which needs next ptr connection 

TC:O(n) SC:O(1)

class Solution {
    public Node connect(Node root) {
        Node curr=root, nxt =null;
        if(root!=null) {nxt = root.left;}
        while (curr!=null && nxt!=null){
            curr.left.next = curr.right;
            if(curr.next!=null) curr.right.next = curr.next.left;
            curr = curr.next;
            if(curr==null){
                curr=nxt; nxt = curr.left;
            }
        }
        return root;
    }
}

