Given an array of n integers nums, a 132 pattern is a subsequence of three integers nums[i], nums[j] and nums[k] such that i < j < k 
and nums[i] < nums[k] < nums[j].

Return true if there is a 132 pattern in nums, otherwise, return false. 

Example 1:

Input: nums = [1,2,3,4]
Output: false
Explanation: There is no 132 pattern in the sequence.
Example 2:

Input: nums = [3,1,4,2]
Output: true
Explanation: There is a 132 pattern in the sequence: [1, 4, 2].
Brute: USing 3 loops O(n^3)

class Solution {
    public boolean find132pattern(int[] nums) {
        for(int i=0;i<=nums.length-3;i++){
            for(int j=i+1;j<=nums.length-2;j++){
                for(int k=j+1;k<nums.length;k++){
                    if(nums[i] < nums[k] && nums[k] < nums[j]){return true;}
                }
            }
        }
        return false;
    }
}

Optimal:

Idea: Create monotonic dec stack so that we have more options for kth num.Stack also maintains min before it. If curr num < peek & curr num > preek.prev min then 132 
pattern is true.

TC:O(n) SC:O(n) 

class Solution {
    public boolean find132pattern(int[] nums) {
        int prev_min=Integer.MAX_VALUE;
        ArrayDeque<int[]> stk = new ArrayDeque<>();//int,prev min
        for(int n:nums){
            while(!stk.isEmpty() && n>=stk.peek()[0]){
                stk.pop();
            }
            if(!stk.isEmpty() && n>stk.peek()[1]){return true;}
            stk.push(new int[] {n,prev_min});
            prev_min=Math.min(prev_min,n);
        }
        return false;
    }
}
