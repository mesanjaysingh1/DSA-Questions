Given an array nums of n integers where nums[i] is in the range [1, n], return an array of all the integers in the range [1, n] that do not appear in nums. 

Example 1:

Input: nums = [4,3,2,7,8,2,3,1]
Output: [5,6]

Brute: Create hashset and add all numbers, check from 1 till n if not in hashset then add it to list. TC:O(n) SC:O(n)

Optimal: Do inplace sorting and place each number at its correct index. Everytime we place num at correct pos decrement i so that next num at ith pos if
not at correct posn, can be placed at its correct position.

TC:O(n) SC:O(1)

class Solution {
    public List<Integer> findDisappearedNumbers(int[] nums) {
        ArrayList<Integer> res = new ArrayList<>();
        for(int i=0;i<nums.length;i++){
            int correct = nums[i]-1;
            if(nums[i]!=nums[correct]){
                int temp = nums[i]; nums[i]= nums[correct]; nums[correct] = temp;i--;
            }
        }
        for(int i=0;i<nums.length;i++){
            if(nums[i]-1 != i){res.add(i+1);}
        }
        return res;
    }
}
