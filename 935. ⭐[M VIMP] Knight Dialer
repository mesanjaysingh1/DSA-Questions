Desc: https://leetcode.com/problems/knight-dialer/

Idea:[ DP] Each place can be visited by some 2 or 3 other position. get number of ways to reach those position and add it.
TC:O(n) SC:O(1)
class Solution {
    public int knightDialer(int n) {
       long [] dp = new long[10];
       long mod = 1000000007, res=0;
        Arrays.fill(dp,1);
       for(int i=1;i<n;i++){
           long temp[] = new long[10];
           temp[0] = (dp[6]+dp[4])%mod;
           temp[1] = (dp[6]+dp[8])%mod;
           temp[2] = (dp[7]+dp[9])%mod;
           temp[3] = (dp[4]+dp[8])%mod;
           temp[4] = (dp[3]+dp[9])%mod+ (dp[0]) %mod;
           temp[6] = (dp[7]+dp[1])%mod+ (dp[0])%mod;
           temp[7] = (dp[2]+dp[6])%mod;
           temp[8] = (dp[3]+dp[1])%mod;
           temp[9] = (dp[2]+dp[4])%mod;
          dp=temp; 
       }
        for(long ways:dp){
            res= (res+ways)%mod;
        }
        return (int) res;
    }
}
